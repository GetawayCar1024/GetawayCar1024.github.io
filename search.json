[{"title":"2025 年日祭","url":"/articles/2025-年日祭/","content":"\n本文将同步发表于[洛谷（暂无法访问）](https://www.luogu.com.cn/article/4njz96qw)、[CSDN](https://blog.csdn.net/qq_43546083/article/details/145521343) 与 [Github 个人博客](/articles/2025-%E5%B9%B4%E6%97%A5%E7%A5%AD/)。\n\n## 2025.1\n\n### 2025.1.4 新的一年\n\n今日歌曲：**New Year's Day**\n\n去年停课的时候是有记日祭的，但是有一些是手写的，一直都还没有整理好。今天看到一个简单的trick，想记下来。于是，就又开始写日祭了。\n\n- [[洛谷 P2831] [NOIP2016 提高组] 愤怒的小鸟](https://www.luogu.com.cn/problem/P2831)\n\n  一道远古状压题了。（一是指题目本身远古，二是指这道题是好久之前就该做的题。）看到第一篇题解的trick，想起去年暑假集训的时候也有这样一个trick，但是忘了是哪道题。这个trick挺简单的，但也挺好用：状压时，如果目标状态是全0或全1，并且转移顺序不影响结果，那么可以直接从最低位的1或0转移，因为最低位最终一定会被转移，而顺序又不影响结果，所以这样做可以优化掉 $O(n)$ 的复杂度。其他的按正常状压即可。\n\n- [[Atcoder ARC100E] Or Plus Max](https://www.luogu.com.cn/problem/AT_arc100_c)\n\n  今天学了 SOSDP，挺神奇的一种 DP。这个题算是板子题吧。只用维护子集的最大值与次大值即可。\n\n今天下午给初二机房的办了一场比赛，整体比较顺利。（所以没做什么题。）比赛链接：[CWOI ER 1 & NYR](https://www.luogu.com.cn/contest/222438)。\n\n今天感觉要掉橙了，但是Rated的比赛还要等一周。想着把之前那篇被打回的题解改了交了，但是晚上写给初二机房的的题解了，没空。看明天改吧。\n\n### 2025.1.10 新的开始\n\n今日歌曲：Castles Crumbling\n\n今天考完期末，回来一看，天塌了，掉橙了。明天打一场比赛。\n\n现在终于确定15班后续的各种事项了。又是一个**新的开始**。\n\n另外，我就莫名奇妙地进省选了（尽管是体验名额）。还有一个有趣的事实：\n\n> 我没有提高组一等奖，然而我进了NOIP（体验名额）；我没有NOIP一等奖，但我进了省选（体验名额）。\n\n期待人生中的第一场SCOI（希望不要爆零）。\n\n### 2025.1.12 言而无信\n\n今日歌曲：Back To December （好吧其实是存货）\n\n我果然是一个**言而无信**的人。踩一脚前天的日祭，昨天还是没打比赛。\n\n今天%你赛，除了暴力的B和C，其它全挂了分。至于A，调试的时候把模数写掉了。被暴扣70分呜呜呜。\n\n最终荣获 $30 + 10 + 30 + 0 = 70$ 的**高**分。\n\n- A - 括号序列\n\n  题目：给一个由左右括号构成的字符串 $s$，对于每一个位置 $i$，输出有多少个子串，满足这个子串是一个合法的括号序列，并且 $i$ 这个位置在子串中。\n\n  题解：简单维护前缀与后缀的括号数量即可。（忘写**该死的**模数暴扣70pts。）\n\n- C - 矩阵删除\n\n  题目：给一个 $n \\times m$ 的 01 矩阵，我们想在每一行删除一个元素，得到一个 $n \\times (m - 1)$ 的矩阵。其中删除的元素的位置 $(i, a_i)(1 \\le i \\le n)$，满足 $\\vert a_{i} - a_{i + 1} \\vert \\le k(1 \\le i \\lt n)$。请问最后能得到多少种不同的矩阵。两个矩阵如果删除的元素位置不同，但最后得到的结果相同，我们认为是相同的。由于答案很大，输出答案对 $10^9+7$ 取模的值。\n\n  题解：比较板的DP，但是赛时思路没那么清晰，也没去推式子。分别维护对于每一个位置的方案数以及与旁边位置重合的方案数，推出式子后发现全都是求和，于是用前缀和维护即可。\n\n### 2025.1.13 乐极生悲\n\n今日歌曲：Wonderland\n\n今天期末考试考完了，整体还行，语文更是考到了惊人的 $127.5$，要知道我之前最高的一次也就 $122$ 左右，而且还经常上不了 $120$，这次简直是超常发挥。听到成绩的时候直接喜极而泣了。\n\n下午体育课，刚好初一体锻放歌，放得全是霉霉的歌，我还去点了几首。开心。\n\n然而下课要集合的时候，我小跑了一下，而这下就恰好被足球爆头，眼镜镜架直接断掉，箍牙的铁丝直接断掉，嘴皮直接被铁钉磨得烂掉，鼻子被眼镜压了一个印子，还在流鼻血。\n\n真是**乐极生悲**。\n\n### 2025.1.17 傻子游戏\n\n今日歌曲：Foolish One\n\n今天开始上课六天。\n\n昨天听说 jmr 拿了清华一等约。祝贺他。\n\n这周二（1.14）已经回到15班了。\n\n昨天晚上玩梗发癫，还玩了离谱的**傻子游戏**。达成成就：在5.5h里睡够8h。\n\n上午%你赛，T1忘了判零挂了10pts，T3是之前做过的一道原题，于是赛时死磕，最后没调出来。赛时的思路基本上是对的，但是没想到容斥；又因为我钦定的一个条件有问题，导致正确性略有问题，最后没调出来。\n\n喜提 $90$ 分。\n\n- A - 串\n\n  题目：在虱子王国，一句话由 $n$ 个词组成，其中恰好有 $k$ 个词是怪的，其它的词都不是怪的。众所周知，负负得正，我们定义一句话的一个区间是怪的，当且仅当其中含有奇数个怪词。请构造一句符合条件的话，使得其中怪的区间数量最多。\n\n  题解：发现答案为奇数块乘上偶数块。构造即可。\n\n- B - 艺术家\n\n  题目：给定一个长度为 n 的颜色序列 $c$。再给出 $m$ 个区间，第 $i$ 个区间为 $[li, ri]$，**保证任何两个区间都是不相交或包含的关系**。在接下来的 $q$ 个单位时间内，第 $i$ 个时间会给定 $x, y$，表示将 $c_x$ 变为 $y$。请对于每一个区间求出，最早的其中所有颜色都互不相同的时间。\n\n  题解：\n\n  > **保证任何两个区间都是不相交或包含的关系。**\n\n  所以可以把区间建成一棵树。当一个子区间合法，其父区间才有可能合法。在原数轴上维护 $lst_i$ 表示 $i$ 之前第一个颜色与 $i$ 相同的点，则一个区间内部颜色互不相同等价于 $\\max\\{lst_i, l \\le i \\le r\\}$。使用线段树维护。对于 $lst$ 的更新，用 set 维护。**即可**。（难写死了，还没写完。）\n\n- C - 黑白树 （[[Atcoder ARC108F] Paint Tree](https://atcoder.jp/contests/arc108/tasks/arc108_f)）\n\n  题解：画一个直径上吊着节点的图，讨论一个节点在什么时候可以带来贡献。容斥计算即可。\n\n晚上打了入门赛，可以加咕值了。\n\n晚自习最后10分钟，记一些话。\n\n> 我的信竞，在进步么？看起来好像是的。要是拿现在的我和一年前的我对比，那已足以 $k$ 倍杀。但……补过的题还是不会做，码量大一点的又不愿意写，一到晚自习就写不动了，于是写一会儿又开始划水。我倒有一个优点，就是一般不会去刷水题（除了入门赛）。但是，难一些的题……绿题效率低，蓝题想不全于是又看题解，紫题几乎无法独立完成。\n>\n> 最终做了的题似乎是白做。\n>\n> ……\n>\n> 终究还是人的问题。\n\n### 2025.1.18 正难则反\n\n今日歌曲：Wildest Dream\n\n这两天换了头像。\n\n今天上午VP [CodeForces Round 997 (Div. 2)](https://codeforces.com/contest/2056)。\n\n- [[CodeForces 2056A] Shape Perimeter](https://codeforces.com/contest/2056/problem/A)\n\n  计算重叠部分即可。\n\n- [[CodeForces 2056B] Find the Permutation](https://codeforces.com/contest/2056/problem/B)\n\n  我们总是建从小节点到大节点的**有向**边，对这个DAG进行拓扑排序。因为我们有时并不想让一个小节点往大节点连边，所以用堆维护入度为零的点即可。（可恶，赛时**多测不清空**卡了我一发。）\n\n- [[CodeForces 2056C] Palindromic Subsequences](https://codeforces.com/contest/2056/problem/C)\n\n  挺**玄学**的构造题。我们希望大概长这样的结构：\n\n  $$\\underbrace{1,\\ 1,\\ 1,\\ \\dots,\\ 1}_ {a个1},\\ 2,\\ 3,\\ 4,\\ \\dots, a + 3,\\ \\underbrace{1,\\ 1,\\ 1,\\ \\dots,\\ 1}_ {a - 1个1}$$\n\n  这样构造出的答案有 $a(a + 2) + 1 = a^2$ 个，可以通过。稍微分讨一下即可。\n\n  赛后看了一下题解，发现自己好唐：\n\n  $$1,\\ 2,\\ 3,\\ \\dots,\\ n-2, \\ 1,\\ 2$$\n\n- [[CodeForces 2056D] Unique Median](https://codeforces.com/contest/2056/problem/D)\n\n  又是一道**正难则反**，计算坏的序列的个数。这道题的trick挺巧妙的，但没接触过，确实想不出来。发现长度为奇数的序列一定不是坏的，所以只考虑偶数长度序列。对于一个序列的中位数 $x$，将序列中 $\\le x$ 的数化为 $-1$，其它的化为 $1$。若最终区间和为 $0$，那么这个序列就是坏的。另外要注意去重。维护前缀和即可。\n\n- [[CodeForces 2056E] Nested Segments](https://codeforces.com/contest/2056/problem/E)\n\n  组合数学。这个包含或不交的关系恰好和昨天的B差不多。我们想要尽可能多的节点数量，那么需要构造成二叉树。（这里具体不想证明。）对于某一个节点，设其儿子数量为 $cnt_u$，则计算 $\\prod C_{cnt_u - 1}$（卡特兰数）即可。\n\n下午先把E题改了，学习了一下吉司机线段树。这东西挺好理解的，写起来也很爽，但就是又臭又长又难调。\n\n- [[洛谷 P10639] [BZOJ4695] 最佳女选手](https://www.luogu.com.cn/problem/P10639)\n\n  这道题本来是第二道模板题的，但因为第一题相当于第二题的子问题，所以直接冲着这道题来了。写板子即可。（啊啊啊终于还是讨厌上吉司机线段树了啊。）\n\n今天整理了**一些**[去年的日祭](https://www.luogu.com.cn/article/vzqga2oy)。还没把手写的整理上去。\n\n### 2025.1.19 简直糖丸\n\n今日歌曲：All You Have To Do Was Stay\n\n今天上午%你赛，T1爆零了，**简直糖丸**。一共得了 $60$ 分的**高**分。\n\n下午给初二讲题，讲得……**简直糖丸**。\n\n烦球，今天最后几乎啥都没干。\n\n啊不是为什么T1爆炸啊。\n\n### 2025.1.20 简直乐丸\n\n今日歌曲：Daylight\n\n昨晚又是在5.5h内睡满8h的一晚。\n\n今天上午VP [CodeForces Round 998 (Div. 3)](https://codeforces.com/contest/2060)。才做四道，糖丸了。\n\n- [[CodeForces 2060E] Graph Composition](https://codeforces.com/contest/2060/problem/E)\n\n  赛时就很唐。并查集查连通并算连通块即可。\n\n- [[CodeForces 2060F] Multiplicative Arrays](https://codeforces.com/contest/2060/problem/F)\n\n  一道很好的DP+组合数学题。赛时推式子感觉推出来了，结果赛后再一看伪了。很容易发现，$\\sum_{i=1}^{len}[a_i \\neq 1] \\le 16$，所以DP计算非 $1$ 元素的情况，再用组合数学即可。\n\n- [[CodeForces 2060G] Bugged Sort](https://codeforces.com/contest/2060/problem/G)\n\n  这个题就挺有意思的。[这篇题解](https://zhuanlan.zhihu.com/p/19369211716)感觉讲得比官方题解还要清晰。可以观察到，当 $n \\ge 3$，我们可以任意（正常）交换两组的位置。因此，我们可以将两组数进行翻转。换而言之，进行翻转的次数必须是偶数次。这里记翻转次数为 $cnt$。我们把较小的数放在 $a$，较大的放在 $b$。若按 $a$ 排序后 $b$ 有序，那么该组数据有解，当且仅当满足这三个条件之一：\n\n  - $2 \\mid cnt$\n  - $\\exists b_{i - 1} \\lt a_i,\\ 2 \\mid n,\\ 2 \\mid i$，此时可以选择交换奇数组数翻转以改变 $cnt$ 的奇偶性，处于“无敌”状态。\n  - $2 \\nmid n$，此时可以翻转全部以改变 $cnt$ 的奇偶性。\n\n  否则无解。判断**即可**。\n\n今天下午看了一个2025年度第一个[乐子](https://lglg.top/1042691)（[原帖](https://www.luogu.com.cn/discuss/1042691)，[内部帖](https://discourse.xinyoudui.com/t/topic/34584)），**简直乐丸**。\n\n又一个[新梗](https://lglg.top/r/7170050)诞生了：\n\n> @chen_zhe 管理制度错了就要改，不能让无辜的人以泪洗面，如果管理制度还是这样的话，**洛谷将会越来越腐败！！**，我大不了就棕名，我要让洛谷知道瞎诬陷的严重性！\n\n### 2025.1.21 反则难证\n\n今日歌曲：deja vu\n\n今天上午VP [CodeForces Round 999 (Div. 1 + Div. 2)](https://codeforces.com/contest/2061)，状态还好。\n\n- [[CodeForces 2061C] Kevin and Puzzle](https://codeforces.com/contest/2061/problem/C)\n\n  有点思维的DP，题目挺好的。\n\n- [[CodeForces 2061D] Kevin and Numbers](https://codeforces.com/contest/2061/problem/D)\n\n  又是一道正难则反。我们很难将 $a$ 合并，那就把 $b$ 中不合法的进行拆分。用 map 维护即可。其实这道题也好证 ~~，只是想凑一个小标题罢了~~。\n\n- [[CodeForces 2061E] Kevin and And](https://codeforces.com/contest/2061/problem/E)\n\n  这题有点……难评。为什么字典树过不了啊……\n\n  因为 $m$ 很小，所以对 $b$ 进行状压，再将 $a$ 的变化量压进堆里选最大的 $k$ 个即可。（好吧其实不是特别理解。）\n\nF 听不懂。\n\n附一张梗图。\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/omxauv8u.png)\n\n（这里声明一下，不是 jmr 讲得不好，而是实在听不懂。）\n\n### 2025.1.22 比特塞特\n\n今日歌曲：Maroon\n\n年前最后一天了。\n\n上午%你赛 $100+10+60+0=170,\\ rank\\ 4$。T3没用 **bitset** 优化暴扣了 $40$ 分。可恶。\n\n- A - bins （[[洛谷 P6807] [BalticOI 2010 Day2] Matching Bins](https://www.luogu.com.cn/problem/P6807)）\n\n  差分即可。\n\n- C - candies（[[洛谷 P6808] [BalticOI 2010 Day2] Candies](https://www.luogu.com.cn/problem/P6808)）\n\n  [题解](/articles/P6808-Candies-题解/)。\n\n## 2025.2\n\n### 2025.2.8 水讨论区\n\n今日歌曲：Bigger Than The Whole Sky\n\n今天洛谷讨论区关闭了。（以后不能**水讨论区**了。）\n\n这个寒假，什么也没干。一看进度，已经和初二的差不多。但是他们第一遍拉得挺快，估计效果不大。\n\n我如果现在回去，在那边又吃不饱。于是，就只有多肝一肝，把之前的进度补上来。\n\n晚上打[ABC392](https://atcoder.jp/contests/abc392)。\n\n- [[Atcoder ABC392E] Cables and Servers](https://atcoder.jp/contests/abc392/tasks/abc392_e)\n\n  略考细节的题。先找连通块，之后再找每个连通块中的返祖边（即无用的边），再把连通块连通即可。\n\n  （可是这题我赛时AC，后来突然想到一个hack。还没改，烦死了。）\n\n### 2025.2.9 终于战胜\n\n今日歌曲：Holyground\n\n[综合题1](https://vjudge.net/contest/691948)。\n\n- [[Gym 103466I] Space Station](https://codeforces.com/gym/II/problem/I)\n\n  神奇搜索题，暴搜+剪枝+略微组合数学即可。\n\n  神奇卡常题目，拼尽全力，2700ms+，终于冲进3s。\n\n- [[Gym 101982D] Count The Bits](https://codeforces.com/gym/101982/attachments)\n\n  很普通的一道DP题，可是赛时都在想组合数学。\n\n  $dp_{i, j}$ 表示到第 $i$ 位模 $k$ 的值为 $j$ 的数中 $1$ 的数量，$cnt_{i, j}$ 表示到第 $i$ 位模 $k$ 的值为 $j$ 的数的数量，直接转移即可。\n\n- [[Gym 102428F] Fabricating Sculptures](https://codeforces.com/gym/102428/problem/F)\n\n  神奇DP题。最开始看题解都没看懂，一是自己确实不理解是怎么算的，二是题解写得比较简略，看了好久才看懂。\n\n  设 $dp_{i, j}$ 表示从上往下一层层放，当前一共放了 $i$ 个，最下面一层放了 $j$ 个的方案数。有方程 $dp_{i, j} = \\sum_{k = 1}^j dp_{i - j, k} * (j + 1 - k)$（希望没写错）。将这个式子拆开再维护前缀和即可。（开了long long见祖宗。）\n\n- [[Gym 104172F] Sum of Numbers](https://codeforces.com/gym/104172/problem/F)\n\n  很有趣的一道题。很容易发现，两个相邻字符串长度之差（的绝对值）为 $0$ 或 $1$。暴搜即可。\n\n  赛时的想法是，将原字符串平均分，再给 $0$ 或 $1$ 的偏移。可是偏移少了一些，虽然没 TLE 但一直 WA，拼尽全力无法战胜。\n\n  赛后再改一改，拼尽全力**终于战胜**。\n\n今天本来说再补补昨天的 F，改改昨天的 E，结果今天的第三题看半天看不懂，昨天的 E 和 F 都没做。\n\n最终今天做了四道题。\n\n感觉心态有点崩。（尤其是看第三题的时候。）\n\n……\n\n### 2025.2.10 ~~放弃即可~~\n\n今日歌曲：Peace\n\n[综合题2](https://vjudge.net/contest/692168)。\n\n今天还做出了一道题。\n\n- [[Gym 100861E] Extreme Programming](https://codeforces.com/gym/100861/attachments)\n\n  看了题解真的好简单。首先我们先确定这些问题的顺序。推推式子，排序即可。现在，我们不用考虑顺序，只用直接背包，找出最大的 $EV$ 与最小的 $ET$ 即可。\n\n  可是这道题不知道哪里写挂了，WA on test 15。**~~放弃即可~~**。\n\n- [[Gym 100217I] Sharing the Sweets](https://codeforces.com/gym/100217/attachments)\n\n  分拆数板子题。（可是我不会。）写板子即可。\n\n  [分拆数 OI Wiki](https://oi-wiki.org/math/combinatorics/partition/)。\n\n- [[Gym 100202A] Little Brackets](https://codeforces.com/gym/100202/attachments)\n\n  这题着实简单。设 $dp_{i, j, 0/1}$ 表示放了 $i$ 个括号，当前高度为 $j$，是否到过最高点（深度为 $k$）的方案数。直接转移即可。\n\n  可是赛时想多了，一直在想组合数学。或许先设方程再推会好一些。\n\n  赛时还因为多测不清空挂了四发。\n\n今天还举办了 [CWOI ER 2 & 1 > 2 Round](https://www.luogu.com.cn/contest/228091)，感觉对于他们还是太难了。\n\n（今天字符数破 $1e4$ 了。）\n\n### 2025.2.11 ~~放弃即可~~\n\n今日歌曲：Pink Pony Club\n\n模拟赛 $40 + 40 + 100 = 180,\\ rank\\ 2$。\n\n- B - 刀言刀语 （[[洛谷 P6864] [RC-03] 记忆](https://www.luogu.com.cn/problem/P6864)）\n\n  今天给的题解以及同学讲解的都是非矩阵做法，可是听得迷迷糊糊。一下午尝试乱搞做法，结果没搞出来，最后，一道题都没改出来，**~~放弃即可~~**。晚上终于学习了矩阵，基本学懂了，这才发现矩阵有多好用。之后又看了这道题的矩阵+线段树做法，终于基本懂了。\n\n  将这些数据打包成矩阵：$\\begin{bmatrix} ans & cnt & 1 \\end{bmatrix}$。对于操作一，等同于 $\\begin{bmatrix} ans & cnt & 1 \\end{bmatrix} \\times \\begin{bmatrix} 1 & 0 & 0 \\newline 1 & 1 & 0 \\newline 1 & 1 & 1 \\end{bmatrix}$。对于操作二，等同于 $\\begin{bmatrix} ans & cnt & 1 \\end{bmatrix} \\times \\begin{bmatrix} 1 & 0 & 0 \\newline 0 & 0 & 0 \\newline 1 & 1 & 1 \\end{bmatrix}$。对于操作三，若是恢复某个操作，则与操作一二相同；若是删除某个操作，则将这个操作设为单位矩阵（$\\begin{bmatrix} 1 & 0 & 0 \\newline 0 & 1 & 0 \\newline 0 & 0 & 1 \\end{bmatrix}$），不会对答案产生影响。用线段树维护每个操作对应的矩阵，区间求和（求积）即可。\n\n  这道题记得比较详细，毕竟是第一次接触矩阵。\n\n- C - 刀妙构造\n\n  题目：给定一个长度为 $n$ 的排列 $a$，通过尽可能少的操作，使得 $\\forall a_i = i$。判断是否有解。若有解，输出具体的操作。操作的定义：选择 $x, y$ 满足 $1 \\le x, y \\le n, \\left | x - y \\right | = 1, a_x \\ne x, a_y \\ne y$，交换 $a_x$ 与 $a_y$。\n\n  题解：原本就满足 $a_i = i$ 的位置将原数组分割成若干个块。对于每个块，若是目标的一种排列则有解。设当前块为 $[l, r]$，则依次把数 $l \\sim r$ 移到位置 $l \\sim r$。要注意的是，在移动的过程中，可能会使得其它的 $a_i = i$ 成立。所以我们将这些即将成立的位置先进行偏移，再将当前的数移到目标位置即可。\n\n  扩展：尝试在 $O(n \\log n)$ 的时间复杂度内求出有解的排列个数，对 $998244353$ 取模。\n\n这几天强度还是比较高，因为跟进度跟得有点吃力了。今天晚上眼睛疼，难受。\n\n### 2025.2.12 罚时吃饱\n\n今日歌曲：two years\n\n今天上午VP [Codeforces Round 1004 (Div. 2)](https://codeforces.com/contest/2067)，下午改[Codeforces Round 1004 (Div. 1)](https://codeforces.com/contest/2066)。上午C题因为少判了一个条件，**罚时吃饱**了。\n\n- [[Codeforces 2066A & 2067D] Object Identification](https://codeforces.com/contest/2066/problem/A)\n\n  神奇交互题。观察到一个性质：对象 $A$ 的答案可能是 $0$，但对象 $B$ 的答案不可能是 $0$。\n\n  若 $x_1, x_2, \\dots, x_n$ 不是 $1 \\sim n$ 的一个排列，一定可以找到一个不在 $x$ 中的数 $k$，对其与另一个不同的数询问。若是对象 $A$，因为 $k$ 没有向任何点连边，所以答案一定为 $0$。若答案不为 $0$，则是对象 $B$。\n\n  若 $x_1, x_2, \\dots, x_n$ 是 $1 \\sim n$ 的一个排列，那么找到满足 $x_i = 1, x_j = n$ 的 $i, j$。询问 $(i, j)$ 与 $(j, i)$。若是对象 $B$，那么两个答案应该是相等的，并且都 $\\ge n - 1$（因为 $\\left | x_i - x_j \\right | = n - 1$）。然而如果是对象 $A$，那么当 $n \\ge 3$，不可能同时存在一条长度至少为 $n - 1$ 的 $i$ 到 $j$ 的路径与一条长度至少为 $n - 1$ 的 $j$ 到 $i$ 的路径（因为 $2(n - 1) \\ge n$）。综上所述，若两个答案相等并且都 $\\ge n - 1$，则是对象 $B$，否则是对象 $A$。\n\n  ~~按照题解模拟即可。~~\n\n- [[Codeforces 2066B & 2067E] White Magic](https://codeforces.com/contest/2066/problem/B)\n\n  这题似乎挺简单的，只是赛时看了一眼但是没多想。\n\n  首先可以注意到，没有 $0$ 的子序列一定是合法的，有两个及以上的 $0$ 的子序列一定是非法的。所以要么选所有非零元素，要么选所有非零元素与一个 $0$。\n\n  若是选一个 $0$，显而易见，选最左侧的 $0$ 是最优的。于是判断这么选是否合法即可。\n\n- [[Codeforces 2066C & 2067F] Bitwise Slides](https://codeforces.com/contest/2066/problem/C)\n\n  很有意思的 DP 题。\n\n  我们根据题意可以得出，对于时刻 $i$，记 $sum_i = \\oplus_{j = 1}^i a_j$，有 $P \\oplus Q \\oplus R = \\oplus_{j = 1}^i a_j$。于是对于某个时刻，有这三种状态：$\\{sum_i, x, x\\},\\ \\{x, sum_i, x\\},\\ \\{x, x, sum_i\\}$。设 $dp_{i, x}$ 表示这三种状态的情况数，经过推导（具体过程略），可以得出 $dp_{i, sum_{i - 1}} = 3 \\times dp_{i - 1, sum_{i - 1}} + 2 \\times dp_{i - 1, sum_i}$。发现可以滚动。由于值域较大，用 map 维护 DP 即可。\n\n- [[Codeforces 2066D1] Club of Young Aircraft Builders (easy version)](https://codeforces.com/contest/2066/problem/D1)\n\n  有趣的组合数学题。\n\n  因为下面的楼层并不会影响上面的楼层，所以从下往上考虑。对于某一个高度，丢飞机的次数最多为 $c$，假设它实际丢 $k$ 个，则有 $c \\choose k$ 种情况。所以设 $dp_{i, j}$ 表示到了第 $i$ 层楼，已经丢了 $j$ 个飞机的情况数。有转移方程 $dp_{i, j} = \\sum_{k = 0}^ c {c \\choose k} \\cdot dp_{i - 1, j - k}$。\n\n  答案为 $dp_{n, m}$。直接 DP 即可。\n\n  扩展：求证答案为 $nc - c \\choose m - c$。\n\n今天晚上略水……没做题。但是今天一天综合下来……还将就吧。\n\n### 2025.2.13 笑点解析\n\n今日歌曲：evermore\n\n今天 jmr 终于回来了。\n\n今天学习了李超线段树。\n\n- [[洛谷 P4097] 【模板】李超线段树 & [HEOI2013] Segment](https://www.luogu.com.cn/problem/P4097)\n\n  刚开始学李超线段树，觉得挺简单的。其实它跟吉司机线段树有点像，只是维护的东西要少一些，并且代码更好写。\n\n  对于每个节点，考虑维护在它中点处的最高线段编号，那么用类似于吉司机线段树区间取 $\\mathrm{max}$：若当前线段完全优于原有线段，那么直接替换；若当前线段完全劣于原有线段，那么直接舍弃；若当前线段与原有线段有交点，那么递归更新当前线段较大的那一段。对于查询，直接把路径上所有的线段取 $\\mathrm{max}$ 即可。时间复杂度 $O(n\\log^2n)$\n\n- [[洛谷 P4069] [SDOI2016] 游戏](https://www.luogu.com.cn/problem/P4069)\n\n  纯堆码量的题。首先这题一眼树链剖分，一眼李超线段树。这题算是很基础的树剖，只是套的是李超线段树。\n\n  于是 LCA + 树剖 + 李超线段树 就算是码量炸弹了。也许树剖都这样，只是我没怎么写过。所以……先把模板题写了再说。\n\n  - [[洛谷 P3384] 【模板】重链剖分/树链剖分](https://www.luogu.com.cn/problem/P3384)\n\n    第一道真正意义上的树剖。之前倒是写过一个有点树剖思想的贪心（但那个好像是长链剖分）。\n\n    一共交了四发，**笑点解析**：前三发线段树没 pushup。由于当时另外没找到问题，于是我严重怀疑是线段树的问题。然后用那个线段树，写了一个线段树的板子，一测挂了，才发现是没写 pushup，糖丸了。\n\n    第一次写树剖，稍微参考了一下题解代码，但整体还是自己在写。树剖其实挺好理解的。\n\n  写完模板题，该写这道题了。这道题从下午就开始写，一直调到晚上都没调出来，只有明天再补了。\n\n今天 $\\mathrm{CCF}$ 把 $\\mathrm{XXSs}$ 给 $\\mathrm{ban}$ 了。适度阻止竞赛低龄化是有道理的，没必要小学就开始竞赛，而且有些 $\\mathrm{HNO_3}$ 真的很没数值；但另一方面，以后的分数线会有所上升。\n\n今天晚上 $\\mathrm{yishu2}$ 让我们帮他帮另一个人验初赛题。那题……一言难尽。\n\n### 2025.2.14 绝世好题\n\n今日歌曲：Red Wine Supernova\n\n今天%你赛，$\\mathrm{only\\ 130\\ pts}$。\n\n- B - permutation （[[Codeforces 1827B2] [加强版] Range Sorting (Hard Version)](https://codeforces.com/problemset/problem/1827/B2)）\n\n  **绝世好题**之神秘计数（？）题。\n\n  又是一道正难则反。容易发现，答案为：\n\n  $$\n  \\sum_{i = 1}^n (i - 1) \\cdot (n - i + 1) - \\sum_{i, j, k}^{1 \\le i \\le j \\le k \\le n} [\\max_{p = i}^j a_p \\le \\min_{p = j + 1}^k a_p]\n  $$\n\n  考虑枚举 $a_x$ 满足 $a_x = \\max_{p = i}^j a_p$，那么 $a_x \\le \\min_{p = j + 1}^k a_p$。显而易见，$a_{j + 1}$ 是 $a_x$ 右侧第一个比它大的数，那么 $i \\in [p + 1, x], k \\in [j + 1, q - 1]$，其中 $p, q$ 满足 $a_p$ 是 $a_x$ 左侧第一个比它大的数，$a_q$ 是 $a_{j + 1}$ 右侧第一个比 $a_x$ 小的数。维护即可。\n\n  这题……题解给的用 set 维护，可惜常数太大，被 $\\mathrm{yishu2}$ 卡掉了。他又给了个链表的实现，不想看，于是自己开始研究。\n\n  由于要求的值都是最近的最大/最小值，所以考虑使用单调栈维护。$j + 1$ 与 $p$ 都非常好求，可是如何求 $q$ 是个问题。\n\n  当时做这道题的时候自己没想出来，后来看原题题解区才懂。做法是，对于前文所提到的 $i, j$，维护 $n$ 个集合 $S_i$，满足 $\\forall i \\in S_{j + 1}$。接下来倒序遍历 $a$，对于每个 $i$，顺序枚举 $j \\in S_i$，将单调栈中 $\\gt a_j$ 的数弹出，栈顶元素即为 $q$。在将每个 $j$ 操作完后，将 $a_i$ 加入单调栈。正确性证明如下（部分摘自原题题解）：\n\n  记 $(x, j + 1)$ 表示查询 $j + 1$ 右侧第一个比 $a_x$ 小的数。（$x, j$ 含义同上。）若这个询问弹出了 $a_l$，那么 $(x' \\gt x, j + 1)$ 的答案显然不为 $l$。现在需要证明 $(x', (j + 1)' < (j + 1))$ 的答案不为 $l$。\n\n  - 若 $(j + 1)' \\lt x$，因为 $a_x \\lt a_l$，所以 $x$ 可以作为答案，答案不可能是 $l$。\n\n  - 若 $(j + 1)' = x$，因为 $a_{x'} \\lt a_{(j + 1)'} = a_x \\lt a_l$，所以答案不可能是 $l$。\n\n  - 若 $x \\lt (j + 1)' \\lt (j + 1)$，那么 $a_{(j + 1)'} \\lt a_{x}$，否则 $a_x$ 右侧第一个比它的的数不可能是 $a_{j + 1}$，所以 $a_{x'} \\lt a_{(j + 1)'} \\lt a_x \\lt a_l$，答案不可能是 $l$。\n\n  终于证完了。按上述步骤维护即可。\n\n  这题本来就有一定的思维难度。如果用单调栈，这道题的思维难度就更高了。如果用有的数据结构（比如 set），倒是好想好写，**可是 $\\mathrm{yishu2}$ 卡常。**\n\n因为今天一下午加晚上一直苦攻 T2，所以昨天的题还没来得及补。\n\n今天写得很晚了，准确来说已经第二天凌晨了。今天就到这里。\n\n### 2025.2.18 无处不在\n\n今日歌曲：I Forgot You Existed\n\n> “我**无处不在**。”——$\\mathrm{yishu2}$\n\n\n今天在改游戏那道题，最终决定重构！\n\n### 2025.2.20 笑点解析\n\n今日歌曲：The Archer\n\n今天还是在改游戏，最后终于还是改出来了。**笑点解析**又来了。\n\n- 在 $dfs1$ 里计算了 $dfn$。\n\n- $dis$ 在线段树中的编号与实际编号混淆了。\n\n- 另外还有一些很糖的低级错误，比如右儿子写成 $p << 1$ 之类的。\n\n### 2025.2.22 显而易见\n\n今日歌曲：wish you were gay\n\n$\\\\%0\\sin$。\n\n- A - 怎么又是先增后减 （[[Atcoder joisc2014_b] [JOI Day2 T2] たのしい家庭菜園](https://atcoder.jp/contests/joisc2014/tasks/joisc2014_b)）\n\n  ~~论赛时代码只与正解相差两行，赛时是有多糖。~~\n\n  **显而易见**，一个数要么放左边，要么放右边。若放左边，则需要交换当前数与左边逆序对的个数，右边同理。**显而易见**，取较小的一侧的答案。用数据结构维护即可。\n\n### 2025.2.25 数组开小\n\n今日歌曲：mirrorball\n\n- [[Codeforces 241E] Flights](https://codeforces.com/problemset/problem/241/E)\n\n  神秘又简单的差分约束。显而易见，我们只关注在 $1$ 到 $n$ 路径上的点，并且 $1$ 到路径上每个点的距离都是唯一的。那么有 $1 \\le dis_v - dis_u \\le 2$。差分约束即可。\n\n  做的时候由于**数组开小**了，挂了若干发，也是糖丸了。\n\n- [[洛谷 P1993] 小 K 的农场](https://www.luogu.com.cn/problem/P1993)\n\n  模板题。\n\n### 2025.2.27 联合省选\n\n今日歌曲：It's Nice To Have A Friend\n\n今天写了一点[**联合省选** 2025 游记](/articles/联合省选-2025-游记/)。\n\n- [[洛谷 P4926] 倍杀测量者](https://www.luogu.com.cn/problem/P4926)\n\n  模板题。\n\n- [[洛谷 P2474] [SCOI2008] 天平](https://www.luogu.com.cn/problem/P2474)\n\n  不怎么板但码量极小的题。\n\n  我们要求的是满足 $x_a + x_b \\lt x_i + x_j, x_a + x_b = x_i + x_j, x_a + x_b \\gt x_i + x_j (i \\ne j, i \\ne a, b, j \\ne a, b)$ 的无序二元组 $(i, j)$ 的个数。由于我们并不知道 $x$ 中的具体数值，只知道部分大小关系，又发现我们可以把上述和式转化为差式，所以维护两个数的差的范围即可。\n\n## 2025.3\n\n### 2025.3.1&2 正常说话\n\n这两天参加省选。这里用**正常的说话**方式补充一些有关考试题目的内容。\n\n- [[洛谷 P11830] [省选联考 2025] 幸运数字](https://www.luogu.com.cn/problem/P11830)\n\n  钦定中位数为 $x$，设可重集中小于 $x$ 的数的个数为 $l$，等于的是 $e$，大于的是 $r$，那么有 $l + e \\ge r, r + e \\gt l$，所以 $l - e \\lt r \\le l + e$。为了让 $x$ 尽量成为中位数，那么考虑让 $e$ 尽可能大，即能取 $x$ 的都取 $x$。同时可以得到 $l, r$ 的范围，便可判断。用差分维护即可。\n\n- [[洛谷 P11833] [省选联考 2025] 推箱子](https://www.luogu.com.cn/problem/P11833)\n\n  先考虑打一个暴力，随后发现是区间覆盖（覆盖成 $x + i$，其中 $x$ 是给定值，$i$ 是下标。）与区间查询。线段树维护即可。（可是我不会告诉你我写的双 $\\log$ 可能要挂分。）\n\n### 2025.3.4 难度偏高\n\n今日歌曲：The Lucky One\n\n今天补了一下 USACO25JAN，铜组**难度感觉偏高**啊。\n\n- [[洛谷 P11667] [USACO25JAN] Astral Superposition B](https://www.luogu.com.cn/problem/P11667)\n\n  思维题。先处理 ``B``，这两颗星星一定一颗在当前位置，一颗在左上方对应的位置。接下来处理 ``G``，如果当前位置能够由已有的星星移动而来，则忽略；否则当前位置需要一个星星。即可。\n\n- [[洛谷 P11672] [USACO25JAN] Table Recovery S](https://www.luogu.com.cn/problem/P11672)\n\n  这题一直没改，今天终于改了。先统计出每个数出现了多少次，仅出现了一次的两个数中的一个便是第一个数。又由于第一个数所在的行/列中的每个数的出现次数是不重复的，于是就可以根据第一个数推出整个表格。比较两个答案中更小的一个输出即可。\n\n### 2025.3.6 正难则反\n\n今日歌曲：Naked In Manhattan\n\n今天中午 C 老师请吃饭，回来就出省选成绩了。省选总分 $232$，折合 $58.71$，$\\mathrm{CW\\ Junior\\ rk\\ 3}$。（其实一共也就 $6$ 个初中生。）\n\n今天略水。\n\n- [[洛谷 P11672] [USACO25JAN] Reachable Pairs G](https://www.luogu.com.cn/problem/P11674)\n\n  有趣的**正难则反**。对于 $1$ 操作，相当于把当前点换成一个超级原点并不参与计数。所以考虑倒推，先建边（并查集合并）再加贡献。具体地，对于一条边 $u \\to v (u \\lt v)$，若：\n\n  - $s_u = 1, s_v = 1$：由于两个点都是超级原点，直接合并 $u, v$ 所在的块。\n\n  - $s_u = 1, s_v = 0$：当枚举到 $v$ 时合并 $u, v$ 所在的块。\n\n  - $s_u = 0$：当枚举到 $u$ 时合并 $u, v$ 所在的块。\n\n  枚举到一个点再加入贡献即可。\n\n### 2025.3.8 ~~打表可得~~\n\n今日歌曲：Starlight\n\n$\\\\%0\\sin$。\n\n- A - 114514\n\n  题目：定义函数 $f(x)$，其中 $x$ 是一个长度为 $n$ 的序列。这个函数的值 $y$ 满足：\n\n  - $y$ 的长度为 $n$。\n\n  - $y$ 中的元素互不相同。\n\n  - $\\forall i \\in [1, n], x_i \\le y_i$。\n\n  - $y$ 是满足上述条件的序列中，字典序最小的。\n\n  现给定 $y$，求有多少个序列 $x$ 使得 $f(x) = y$。\n\n  题解：__~~打表可得~~__，每个位置可能的值是独立的，即对于任意一个**位置** $i$，$a_i$ 的取值集合不会随其他值的改变而改变。设 $vis_i$ 表示**值** $i$ 是否出现过，那么对于 $a_i$ 的取值范围就是 $[l, i]$，其中 $l$ 满足 $\\forall k \\in [l, i], vis_k = 1$ 且 $vis_{l - 1} = 0$。并查集维护即可。\n\n- C - 深黯「军团」\n\n  题目：给定 $n, k, mod$ 与一个长度为 $n$ 排列 $a$。计算从 $a$ 开始的接下来 $k$ 个排列的逆序对个数之和。\n\n  题解：神秘数位 DP。这题赛时还是想到了许多，但是考试时误认为 $a$ 的较高位不会改变，所以挂成 $20$ 分（数据好水）。\n\n  赛时想到了通过求一个排列的逆序对来算排名，也想到了要求的就是排名在一个区间内的排列的逆序对数之和，还**~~通过打表~~**想到了全排列的逆序对个数的 DP，甚至还想到了类似于阶乘进制的东西，可是因为不会[康托展开](https://oi-wiki.org/math/permutation/#%E6%8E%92%E5%90%8D)而没写出来。\n\n  具体地，将 $k$ 与排列 $a$ 康托展开。由于康托展开的值的数位之和就是逆序对个数，所以答案为 $\\sum_{i = a}^{a + k} count(i)$，其中 $count(i)$ 表示 $i$ 的数位之和。对于重复的部分，直接 DP 即可。\n\n### 2025.3.11 观察样例\n\n今日歌曲：Getaway Car\n\n要改名了。今天 VP [Codeforces Round 1008 (Div. 2)](https://codeforces.com/contest/2078)，打得烂的一匹，最开始只做了 A 和 B，不过幸好在 2:28 把 E AC 了，不然今天晚上整个人都不好了。\n\n- [[CodeForces 2077A & 2078C] Breach of Faith](https://codeforces.com/contest/2077/problem/A)\n\n  赛时一直在求 $a_1$，然后就被卡死了。\n\n  事实上，发现 $a_2$ 更好求一些。$a_2 = a_1 + a_{2n + 1} + a_3 - a_4 + a_5 - a_6 + \\dots + a_{2n - 1} - a_{2n}$。显而易见，把最大值作为 $a_1$ 即可不重复。排序即可。\n\n- [[CodeForces 2077B & 2078E] Finding OR Sum](https://codeforces.com/contest/2077/problem/B)\n\n  神秘交互题。以下均讨论八位整数。**观察样例**发现，询问 $0$ 似乎比较有用，可以直接得到 $x + y = sum$。再~~根据直觉~~，考虑询问 $01010101$，将得到的答案 $ans$ 再减去 $sum$ 就可以得到 $1$ 的贡献。为了不让每一位的贡献重叠，我们便想到空一个位置放一个 $1$。这样，我们就可以根据这些数位的贡献来算出这些数位的和（指 $x, y$ 对应数位之和）。剩下未知的数位也便可以根据 $sum$ 与已知的数位求出。显而易见，求答案时我们并不在意当前数位具体的值，只在意数位和。所以对于 $m$ 的每一位只用分讨 $0$ 或 $1$ 即可。\n\n  这种题确实挺直觉的，个人觉得也比较靠运气。~~比如我 C 想了半天就是想不到，这题基本是看一眼就有点想法而且就对了，甚至还是一发入魂。~~\n\n### 2025.3.15 嗨克数据\n\n今日歌曲：This Is Why We Can't Have Nice Things\n\n$\\\\%0\\sin$。\n\n- D - 完美的答卷\n\n  题目：给定长度为 $n$ 的数组 $a$，设 $f_{l, r} = (\\max_{i = l}^r a_i) \\oplus (\\min_{i = l}^r a_i)$，求 $\\max_{1 \\le i \\le j \\le n} f_{i, j}$。\n\n  题解：本题数据过水，以至于赛时对拍拍出了问题但是交到 OJ 上过了。赛时这题也想到了许多，可是逻辑并不清晰，最后还是看了题解并与 dpfs 讨论才想出了以下的解法。\n\n  钦定 $a_i$ 是一个区间的最大值，$a_j$ 是这个区间的最小值，且 $j \\lt i$。设 $pre_i$ 表示 $i$ 左侧第一个比 $a_i$ 大的位置，则 $j \\in (pre_i, i)$，且 $j$ 在 $[1, i]$ 的单调（递增）栈中，单调栈 + 01trie 维护即可。可是，上述两个集合的交集不一定从 $1$ 开始，所以对于 trie 树中的一个节点 $i$，维护 $mx_i$ 表示经过该点的数的**下标的最大值**，便可以解决。可是删除又成为了一个问题。考虑用 vector 暴力维护每个 $mx_i$ 的历史值，理论上时间复杂度不变，只是常数巨大。\n\n  改完之后，就开始造 **hack 数据**了。似乎有用但不多。\n\n### 2025.3.18 极限 AC\n\n今日歌曲：Paper Rings\n\n今天 VP [Codeforces Edu Round 176](https://codeforces.com/contest/2075)。由于准备 VP 时 CF 还在系统测试，所以并不算严格意义上的 VP。最后一共做了 4 道，而 D 是在 VP 1:54 时才 AC，此前还有 3 发罚时。也是**极限 AC**。\n\n- [[CodeForces 2075C] Two Colors](https://codeforces.com/contest/2075/problem/C)\n\n  先将 $a$ 排序。发现对于某一种颜色，能够与其搭配的颜色都是连续的一段。所以前缀和并动态维护能够搭配的区间即可。注意略特判 $a_i = n$ 的情况。\n\n- [[CodeForces 2075D] Equalization](https://codeforces.com/contest/2075/problem/D)\n\n  注意到花费不能重复，所以考虑背包 DP。设 $dp_{i, j}$ 表示将 $x$ 右移 $i$ 位、将 $y$ 右移 $j$ 位的最小代价，转移十分显然，即可 $O(\\log_2^2 n)$ 无脑做。然而由于我赛时**太有脑了**，非要写 $O(\\log_2 n)$，最后调了好久才过。~~下次再也不长脑子了。~~\n\n### 2025.3.20 疑似双休\n\n今日歌曲：I Hate It Here\n\n后天不用上课，这周**疑似可以双休**了！\n\n今天在补好题推荐。\n\n- [[CodeForces 2078D] Scammy Game Ad](https://codeforces.com/contest/2078/problem/D)\n\n  很符合“时下流行”的题目了。\n\n  考虑 DP，设 $dp_{i, 0/1}$ 表示从第 $i$ 个左/右门开始，到最后一个门的**最大倍率**。转移也是十分显然的。对于第 $i$ 对门通过加法新产生的人数 $x$，将答案加上 $x \\cdot \\max(dp_{i + 1, 0}, dp_{i + 1, 1})$ 即可。注意最初还有 $2$ 个人。\n\n### 2025.3.22\n\n并不是双休，在家里 VP 模拟赛。\n\n### 2025.3.25\n\n打 USACO，菜得银组一道都不会。\n\n### 2025.3.27\n\n- [[CodeForces 2077C] Binary Subsequence Value Sum](https://codeforces.com/contest/2077/problem/C)\n\n  极其有趣的题目了。\n\n  显而易见，$F(v, l, r) = one(v, l, r) - zero(v, l, r)$，所以一个字符串的权值 $W(v) = \\lfloor \\frac{(one(v) - zero(v))^2}{4} \\rfloor$。把 $0$ 换 $-1$，那么 $W(v) = \\lfloor \\frac{sum^2(v)}{4} \\rfloor = \\frac{sum^2(v) - (sum(v) \\mod 2)}{4}$。继续将这个式子化简即可，~~这里不再赘述~~。\n\n- [[CodeForces 2082B] Floor or Ceil](https://codeforces.com/contest/2082/problem/B)\n\n  从二进制角度思考，向上取整等同于先加一再右移一位，向下取整则是直接向右移一位。所以，若一个向上取整操作后还有一个向下取整操作，那么这个向上取整操作相当于是无效的。又有在 $n + m$ 次操作之后，**最大值最多比最小值大一**。所以对于最小值，先向上取整再向下取整即可，最大值反之。\n\n- [[CodeForces 2081A] Math Division](https://codeforces.com/contest/2081/problem/A)\n\n  考虑多操作一次的期望。多操作一次，则代表在第 $n$ 位上产生了进位，又因为 $a_n = 1$，所以前 $n - 1$ 位产生了进位（第 $n$ 位是最高位）。设 $dp_i$ 表示前 $i$ 位进位的期望，则：\n\n  $$\n  dp_i = \\begin{cases}\\frac{1}{2} \\times dp_{i + 1},\\ a_i = 0\\newline\\frac{1}{2} \\times (1 - dp_{i + 1}) + dp_{i + 1},\\ a_i = 1\\end{cases}\n  $$\n\n  直接 DP 即可。\n\n## 2025.4\n\n### 2025.4.1 愚人节\n\n今日歌曲：Forever Winter\n\n我的日祭之前断更了一段时间，今天终于补上了。\n\n今天改不动题，于是在出题。\n\n### 2025.4.6 水讨论区\n\n今日歌曲：Guilty Pleasure\n\n讨论区居然真的回来了，又可以**水讨论区**了（。\n\n今天 VP [Codeforces Round 1015, Div. 1 + Div. 2](https://codeforces.com/contest/2084)，赛后结算时，发现机房网络得了 MVP。详见犇犇。\n\n前四题都是沟槽构造，不再赘述。\n\n- [[Atcoder ABC400F] Happy Birthday! 3](https://atcoder.jp/contests/abc400/tasks/abc400_f)\n\n  考虑正难则反。问题转化为：\n\n  > 一个环上有 $n$ 个物品，颜色分别为 $col_i$，每次操作选择两个数 $i, j$ 使得 $\\forall k \\in [i, j],  col_k = col_i \\lor col_k = 0$，对 $[i, j]$ 进行“漂白”，即将颜色都设为 $0$。一次操作的代价为 $j - i + 1 + x_{col_i}$。求将整个环漂白的最小总代价。\n\n  先断环为链。设 $dp_{i, j}$ 表示将 $[i, j]$ 漂白的最小代价，那么显然有 $dp_{i, j} = \\min_{k = i}^{j - 1} dp_{i, k} + dp_{k + 1, j}$。\n\n  设 $f_{i, j}$ 表示使 $[i, j]$ 能够漂白的最小代价，那么显然有 $f_{i, j} = \\min_{k = 1}^{j - 1} f_{i, k} + dp_{k + 1, j}$。当 $col_i = col_j$ 时，有 $f_{i, j} = \\min (f_{i, j}, f_{i, j - 1}), dp_{i, j} = \\min (dp_{i, j}, f_{i, j} + j - i + x_{col_i})$。\n\n  答案即为 $\\min_{i = 1}^n dp_{i, i + n - 1}$。\n\n- [[Codeforces 2086E] Zebra-like Numbers](https://codeforces.com/contest/2086/problem/E)\n\n  确简单的啊，可是自己就是想不到。\n\n  考虑计算一个数的斑马值。贪心地，尽量选大的斑马数减即可。\n\n  考虑记搜，设 $dp_{i, j}$ 表示 $[1, i]$ 中斑马值为 $j$ 的数的个数。那么显然有 $dp_{i, j} = dp_{i - mx, j - 1} + dp_{mx - 1, j}$，其中 $mx$ 是不大于 $i$ 的最大的斑马数。具体地，$dp_{i - mx, j - 1}$ 表示 $[mx, i]$ 中斑马值为 $j$ 的数的个数，$dp_{mx - 1, j}$ 表示 $1, mx - 1$ 中斑马值为 $j$ 的数的个数。\n\n### 2025.4.8 过水了\n\n今日歌曲：it's time to go\n\n**过水了**今天。\n\n### 2025.4.10 证明略\n\n今日歌曲：The Albatross\n\n- [[Atcoder ARC196A] Adjacent Delete](https://atcoder.jp/contests/arc196/tasks/arc196_a)\n\n  唐题啊，可是和我相比还是我更唐。\n\n  假设 $n$ 是偶数。如果我们忽略删除相邻数的条件，即可以任选两个数相减，那么答案应该是前 $\\frac{n}{2}$ 大的数（记作“较大数”）的和减去前 $\\frac{n}{2}$ 小的数（记作“较小数”）的和。\n\n  容易发现，当我们只能选相邻数相减时，依然可以达到这个答案，因为在任意时刻，总存在至少一对较大数与较小数相邻。\n\n  当 $n$ 是奇数，那么一定有一个元素不被选，且这个元素一定在奇数位，这样才能把数组分成长度为偶数的两段。枚举不被选的位置，用对顶堆维护前后两段的答案即可。\n\n- [[Atcoder パ研合宿2024 第3日 E] Roller Coaster](https://atcoder.jp/contests/arc196/tasks/arc196_a)\n\n  人类智慧啊。选高度差最大的边即可。**证明略。**\n\n- [[Atcoder パ研合宿2024 第3日 G] Bracket Sequence](https://atcoder.jp/contests/pakencamp-2024-day3-2/tasks/pakencamp_2024_day3_2_g)\n\n  极一眼啊，大概十分钟切了吧。跟翻转括号序列的一个区间那题差不多，这题还简单一点。\n\n  注意到位置 $i$ 可由 $i - 1$ 与跟 $i$ 位置高度相同的位置转移而来。拿一个桶维护后者即可，遇到右括号时记得清零。\n\n### 2025.4.12 写了跟写了一样\n\n今日歌曲：august\n\n模拟赛。\n\n- A - 倒水\n\n  题目：有三个容量分别为 $x, y, z$ 的杯子与一个容量为 $n$ 的一个桶，每次可以：\n\n  - 把一个杯子灌满；\n  - 把一个杯子的水倒出去；\n  - 把一个杯子的水倒到另一个杯子直到这个杯子空了或另一个杯子满了；\n  - 把一个杯子的水倒到桶里。\n\n  对于 $[1, N]$ 中的每一个 $n$，求要使桶装满水，最少的操作次数。\n\n  题解：$\\mathrm{yishu2}$ 发的题解**写了跟写了一样**。\n\n  容易发现，经过转化，可以得到两种操作：向桶里加 $x / y / z$ 单位水与从桶里舀出 $x / y / z$ 单位水回到对应的杯子（后者是操作一与操作三的结合），每次操作的代价都为二。注意到，对于某一个水杯，若我们用它进行的最后一个操作是操作二，那么代价为一，因为不用把舀出来的水倒出去。设 $dp_{i, j}$ 表示桶里有 $i$ 单位水的最小代价，$j$ 表示三个水杯是否最后用于操作二，那么先正着 DP 一遍，即全部使用操作一，再反着 DP 即可。统计答案时应统计 $dp_{i, j} - popcount(j)$。\n\n- B - 让他们连通 （[[Codeforces 1706E] Qpwoeirut and Vertices](https://codeforces.com/problemset/problem/1706/E)）\n\n  居然能场切 $2300$。\n\n  要让区间 $[l, r]$ 连通，等价于 $\\forall i \\in [l, r)$，$i$ 与 $i + 1$ 连通。设 $time_i$ 表示 $i$ 与 $i + 1$ 连通的时间，则答案为 $\\max_{i = l}^{r - 1} time_i$，可以用 ST 表维护，常数又小又好写。\n\n  对于 $time_i$，考虑启发式合并。在合并时，枚举较小的集合的元素，并判断它是否与另一个集合中的元素相邻即可。赛时因为没判 $fa_x = fa_y$ 被硬控了半个小时。\n\n### 2025.4.15 不想证明\n\n今日歌曲：cardigan\n\n- [[Atcoder パ研合宿2024 第3日 G] 門松](https://atcoder.jp/contests/pakencamp-2024-day3-1/tasks/pakencamp_2024_day3_1_k)\n\n  无脑做啊，**不想证明**。\n\n- [[Atcoder パ研合宿2024 第3日 H] Big XOR Game](https://atcoder.jp/contests/pakencamp-2024-day3-1/tasks/pakencamp_2024_day3_1_H)\n\n  ~~这题评分比括号序列还要低。~~\n\n  从高到低讨论，对于每一位，设当前位上是 $1$ 的数的个数是 $cnt$，那么有：\n\n  ```cpp\n  if(((cnt + 1) / 2) & 1 and (cnt / 2) & 1 ^ 1) Alice;\n  if(((cnt + 1) / 2) & 1 ^ 1 and (cnt / 2) & 1) {\n    if(n & 1) Bob;\n    else Alice;\n  }\n  ```\n\n  不想详细说明。\n\n### 2025.4.19 输入挂了\n\n今日歌曲：Sad Beautiful Tragic\n\nTTPD 一周年了。\n\n今天模拟赛因为**输入挂了** $76 pts$，机房 rating ~~暴涨~~暴跌。\n\n- A - 说唱入门教学\n\n  题目：给定一首歌的歌词（以拼音形式），每两句话一一匹配，$\\forall i \\in [1, m]$，求出 $i$ 押的个数。\n\n  题解：题面好唐。先把韵母处理出来，然后 trie 树即可。常数极大。\n\n- B - 画画入门教学\n\n  构造题，手动推一推小样例即可。\n\n## 2025.5\n\n### 2025.5.5 了跟了一样\n\n今日歌曲：Fifteen\n\n又断更了半个月。\n\n前几周学了一下 AC 自动机，~~但是**学了跟学了一样**。~~\n\n前几天终于把那套题出完了，~~但是**出了跟出了一样**。~~\n\n昨天考试，听了评讲，~~但是**改了跟改了一样**。~~\n\n晚上打 ARC，~~但是**打了跟打了一样**。~~\n\n- [[Atcoder ARC197C] Removal of Multiples](https://atcoder.jp/contests/arc197/tasks/arc197_c)\n\n  唐题啊，但是赛时一直在想整除分块之类的，结果没想出来。\n\n  但是这题也就真纯唐，用线段树维护区间内留下的数的数量即可。需要证个上界。\n\n- [[Atcoder ARC197D] Ancestor Relation](https://atcoder.jp/contests/arc197/tasks/arc197_d)\n\n  好题啊好题。记 $b_i$ 表示矩阵的第 $i$ 行的内容（用 bitset 维护）。\n\n  考虑什么时候有 $a_{u, v} = 1$。因为与孩子有关系的节点一定与祖先有关系，但与祖先有关系的节点不一定与孩子有关系。所以有 $b_u | b_v = b_u$ 或 $b_u | b_v = b_v$，前者对应 $u$ 是 $v$ 的祖先，后者则对应 $v$ 是 $u$ 的祖先。容易证明这是一个充要条件，那么若 $a_{u, v} = 0$，则一定不存在 $b_u | b_v = b_u$ 与 $b_u | b_v = b_v$。\n\n  接下来考虑一种特殊情况：$b_u = b_v$，此时 $u, v$ 在一条没有任何分岔的一条“链”上，那么这条链上的节点的位置就可以互换。设一组 $b_i$ 相同的点的数量为 $sz$，那么这一组点可以带来 $sz!$ 的贡献。\n\n  此外，$\\forall i \\in [1, n]$，显然需要有 $a_{i, 1} = 1, a_{1, i} = 1$。那么我们就总结出以下三条条件或贡献：\n\n  - $\\forall i \\in [1, n], a_{i, 1} = 1, a_{1, i} = 1$。\n  - $b_u | b_v = b_u$ 或 $b_u | b_v = b_v$，当且仅当 $a_{u, v} = 1$。（等价于：$a_{u, v} = 1$，当且仅当 $b_u | b_v = b_u$ 或 $b_u | b_v = b_v$。）\n  - 对于极多的 $sz$ 个 $b_i$ 相同的数，可以带来 $sz!$ 的贡献。\n\n  于是按以上三点计算即可。\n\n### 2025.5.18 宇宙射线\n\n由于**宇宙射线**的影响，这里遗失了一篇日祭。主播不想补日祭了。\n\n前几天又断更了，应该是在补 CQ CCPC 的题吧。主播不想补日祭了。\n\n（我明明写了的，可不知道这篇日祭怎么就消失了。）\n\n### 2025.5.22 主播不想补日祭\n\n今日歌曲：High Infidelity\n\n前天又学了一下 exgcd。**主播不想补日祭**了。\n\n今天考试。\n\n- A - 三重移位 （[[Atcoder ARC136B] Triple Shift](https://atcoder.jp/contests/arc136/tasks/arc136_b)）\n\n  略为神秘。观察到，进行一次操作后，逆序对个数的变化量一定是偶数，所以 $a$ 与 $b$ 的逆序对个数的差值必须是偶数。另外，当 $a$ 中存在重复的元素，那么相当于可以造一对逆序对出来，此时一定有解。\n\n- B - 最小差分和 （[[Atcoder ARC147C] Min Diff Sum](https://atcoder.jp/contests/arc147/tasks/arc147_c)）\n\n  [题解](/articles/ARC147C-Min-Diff-Sum-题解/)。\n\n  更好的做法如下：假设当前 $x$ 有序，那么可以拆贡献。拆下来是 $\\sum_{i = 1}^\\frac{n}{2} (n - 2i + 1)(x_{n +1 - i} - x_i)$。于是让 $x_{n + 1 - i}$ 尽量小，$x_i$ 尽量大。将 $l$ 降序排序，将 $r$ 升序排序即可。（主播不想写了，看不懂就去看原题题解吧。）\n\n- C - 前缀与后缀 （[[洛谷 P9180] [COCI 2022/2023 #5] Slastičarnica](https://www.luogu.com.cn/problem/P9180)）\n\n  [To do]\n\n- D - 贪吃蛇 （[[洛谷 P7078] [CSP-S2020] 贪吃蛇](https://www.luogu.com.cn/problem/P7078)）\n\n  [To do]\n\n### 2025.5.24 竟然草过去了\n\n今日歌曲：You're on Your Own, Kid\n\n今天叕考试。\n\n- A - 红魔乡 （[[TopCoder 15693] Fixed Point Reversals](https://vjudge.net/problem/TopCoder-15693)）\n\n  显然好做。把翻转区间看成交换元素即可，唯一的限制是当交换的两个元素在 $pos$ 的两侧时，这两个元素需要关于 $pos$ 对称。\n\n- B - 妖妖梦 （[[洛谷 P4576] [CQOI2013] 棋盘游戏](https://www.luogu.com.cn/problem/P4576)）\n\n  当且仅当黑棋和白棋出生在一起时，白棋能赢，否则赢家一定是黑棋。那么黑棋就尽量快速解决战斗，白棋就尽量多拖延，所以白棋转移状态时取最大值，黑棋选择状态时取最小值即可。\n\n- C - 永夜抄 （[[TopCoder 10945] Rectangular Island](https://vjudge.net/problem/TopCoder-10945)）\n\n  ``long double`` 还是太玄学了，**竟然草过去了**。发现左右移动和上下移动其实是相对独立的，所以单独处理即可。设 $row_i$ 表示在左右方向上移动了 $i$ 步，还在格子里的概率，$col_i$ 同理，它们是可以 $O(ns)$ 处理出来的。接下来枚举 $i$ 表示左右方向上移动的次数，那么此时的贡献应该是 $row_i \\cdot col_{s - i} \\cdot {s \\choose i} \\cdot \\frac{1}{2^s}$。$s \\choose i$ 显然容易维护，可是发现 $\\frac{1}{2^s}$ 这东西容易炸掉，又发现在计算 $row_i$ 和 $col_{s - i}$ 时一共恰好迭代了 $s$ 次，所以在计算 $row$ 和 $col$ 时每迭代一次时乘上 $\\frac{1}{2}$ 即可。\n\n- D - 花映冢\n\n  题目：给定一个图，点数和边数都是 $10^5$ 级别的，可能有环、自环和重边，求是否存在一条从 $1$ 出发的路径可以经过所有点至少一次。（可以重复经过边或点）。\n\n  题解：显然先把自环和重边判了，接下来 Tarjan 缩点，再拓扑排序即可。\n\n### 2025.5.26\n\n今天补题。见 5.22 与 5.24。\n\n### 2025.5.29\n\n今日歌曲：Cruel Summer\n\n今天继续补题。见 5.22。\n\n## 2025.6\n\n### 2025.6.2 问我怎么挂的\n\n今天做题。\n\n- [[洛谷 P2833] 等式](https://www.luogu.com.cn/problem/P2833) & [[SGU 106] The equation](https://codeforces.com/problemsets/acmsguru/problem/99999/106)\n\n  板子题啊，可是改了好久。主要死在向下、向上取整时没用 ``double``（因为有负数）。\n\n- [[SPOJ NWERC11A] Binomial coefficients](https://www.spoj.com/problems/NWERC11A/)\n\n  这道题自己想到了枚举 $k$，二分 $n$，也想到了会爆 ``long long``，可是没想到枚举。\n\n  对于 $k \\in [1, 6]$，进行二分；对于 $k \\in [7, 30]$，枚举即可。\n\n  做的时候因为各种小问题挂了 $+\\infty$ 发。\n\n- [[洛谷 P2421] [NOI2002] 荒岛野人](https://www.luogu.com.cn/problem/P2421)\n\n  挺简单的呀。**问我怎么挂的**，其实是把 $y$ 写成 $b$ 了。还有另外一些小错。（比如步长写错了，还有负数导致的一些奇怪的问题。）\n\n  枚举 $m$ 与每一对人，解 $c_i + p_ik \\equiv c_j + p_jk\\ (\\mathrm{mod}\\ m)$ 即可。\n\n- [[SGU 107] 987654321 problem](https://codeforces.com/problemsets/acmsguru/problem/99999/107)\n\n  没想到是打表题。打表发现满足要求的九位数有 $8$ 个，十位数自然就有 $72$ 个。（原有基础上在开头加一个数。）十位数以上，每多一位，答案自然就 $\\times 10$。九位数以下答案为 $0$。\n\n### 2025.6.3\n\n- [[SGU 126] Boxes](https://codeforces.com/problemsets/acmsguru/problem/99999/126)\n\n  神秘结论题。设 $n = a + b$。模拟一个倒推的过程，容易发现，当且仅当 $a, b = \\frac{i}{2^m} n$ 时有解，其中 $i$ 是奇数，$m$ 是整数。若有解，模拟即可。\n\n### 2025.6.27\n\n也是莫名其妙断更了一个月。\n\n也是终于把别样的 whk 草过去了。\n\n今天补日祭。\n\n**欧拉函数、欧拉定理与线性筛专题**\n\n- 欧拉函数 $\\varphi(n) = \\sum_{i = 1}^n [\\gcd(i, n) = 1]$\n- 欧拉定理 $a^{\\varphi(n)} \\equiv 1 \\mod n$\n- 满足 $\\gcd(i, n) = m$ 的数的个数 $\\Leftrightarrow$ 满足 $\\gcd(i, \\frac n m) = 1$ 的个数 $\\Leftrightarrow\\ \\varphi(\\frac n m)$。\n- $\\sum_{i \\in [1, n] \\land \\gcd(n, i) = 1} i = \\frac{n \\cdot \\varphi(n)} 2 (n \\ne 1)$\n\n利用以上结论即可完成：\n\n- [[HDU 2588] GCD](https://acm.hdu.edu.cn/showproblem.php?pid=2588)\n- [[51Nod 1040] 最大公约数之和](https://vjudge.net/problem/51Nod-1040)\n- [[UVA 11426] GCD - Extreme (II)](https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=2421)\n- [[洛谷 P1891] 疯狂 LCM](https://www.luogu.com.cn/problem/P1891)\n\n---\n\n- [[Codeforces 1149D] Abandoning Roads](https://codeforces.com/problemset/problem/1149/D)\n\n  CF 3000* 远古题，洛谷黑，所以也算是首黑吗。\n\n  这题复杂度鬼能想出来。\n\n  首先先把重边断掉，这样就会形成若干个连通块。将这些连通块“缩点”之后，用 dij 做新图的最小生成树即可。具体地，设 $dp_{i, st}$ 表示当前在第 $i$ 个点，已经到达的连通块为 $st$ 的最短路径。显然每个连通块只会被访问一次，所以复杂度是 $O(2^nm\\log 2^nm)$ 的。注意到当一个连通块的大小 $\\le 3$ 时，若先离开这个连通块再回到这个连通块，至少要经过 $2$ 条重边，而走连通块内部只需要最多 $2$ 条轻边，所以显然不需要考虑这个连通块，因为跑 dij 的时候显然会选择走连通块内部而不会重复经过。那么连通块数量被优化到了 $\\frac n 4$，时间复杂度 $2^{\\frac n 4}m \\log 2^{\\frac n 4}m$。\n\n### 2025.6.30\n\n今日歌曲：Down Bad\n\n昨天终于也是稳 1= 了。\n\n~~这高中语文老师还是非常正常，但是这高中英语老师是比我还抽象。~~\n\n今天补题。\n\n- [[Atcoder ARC180D] Division into 3](https://atcoder.jp/contests/arc180/tasks/arc180_d)\n\n  很久之前一场模拟赛的题了。\n\n  一件显然的事情，就是一个区间的最大值 $mx$ 一定会做出贡献。若 $mx$ 放在第二段，那么当第一段与第三段的长度为 $1$ 时可以取到最小值，用 ST 表维护即可。若 $mx$ 放在第一段，那么当第二段长度为 $1$ 可以取到最小值。设 $x = \\min_{i = l}^r i \\cdot [a_i = mx], f_i = a_i + \\max_{j = i + 1}^r a_j$，那么答案即为 $mx + \\min_{i = x + 1}^{r - 1} f_i$。将询问离线再用单调栈与线段树维护 $f_i$ 即可。若 $mx$ 放在第三段，则与放在第一段类似。\n\n- [[洛谷 P6864] [RC-03] 记忆](https://www.luogu.com.cn/problem/P6864)\n\n  这道题显然是之前记过的，今天终于补了。\n\n## 2025.7\n\n### 2025.7.1 好的标题\n\n> 为什么你不写标题了呀？——@[_O_v_O_](https://www.luogu.com.cn/user/782941)\n>\n> 因为没想到**好的标题**。——@[Getaway_Car](https://www.luogu.com.cn/user/725640)\n\n另外，注意到，我一月到六月的日祭数量如下：\n\n|     月份      | 数量 | 有标题数量 |\n| :-----------: | :--: | :--------: |\n| $\\text{Jan.}$ | $10$ |    $10$    |\n| $\\text{Feb.}$ | $12$ |    $12$    |\n| $\\text{Mar.}$ | $11$ |    $8$     |\n| $\\text{Apr.}$ | $7$  |    $7$     |\n| $\\text{May.}$ | $6$  |    $4$     |\n| $\\text{Jun.}$ | $4$  |    $1$     |\n\n我们的日祭正在蒸蒸日下！\n\n---\n\n- [[Codeforces 1610G] AmShZ Wins a Bet](https://www.luogu.com.cn/problem/CF1610G)\n\n  CF 3300* 远古题，洛谷黑，所以也算是第二道黑吗。\n\n  赛时想到了每次删除的是一段合法的括号序列，可是竟然连最基本的 DP 都没想到，how sweet！\n\n  考虑倒序做，设 $dp_{i}$ 表示 $[i, n]$ 的答案，那么它可以由 $s_i + dp_{i +1}$ 与 $dp_j$ 转移而来，其中 $j$ 是能与 $i$ 匹配的第一个位置。时间复杂度 $O(|s|^2)$。\n\n  发现比较字符串还是太慢了，所以考虑使用倍增与哈希实现字符串比较，具体实现类似于树上跳 LCA，一直跳直到 $j$ 跳到边界或者 $s_i \\ne s_j$，即可知道两者的大小关系。\n\n### 2025.7.2\n\n- [[CS Academy] Sugarel in Love](https://csacademy.com/contest/archive/task/Sugarel-in-Love)\n\n  我还是太唐了，这样的唐题都不会。\n\n  设 $dp_{i, 0/1/2}$ 表示 $i$ 的子树中，$i$ 目前度为 $0/1/2$ 的最大答案。直接转移即可。\n\n- [[CS Academy] Divided Kingdom](https://csacademy.com/contest/archive/task/divided-kingdom)\n\n  对于任意两条相邻的边 $u$ 与 $v$，答案不会超过 $w_u + w_v$，因此可以初步确定答案上界 $p$。另外，看到最小值的最大值，很容易想到二分。二分答案 $x$，那么有对于任意在同一集合内的 $a, b$，满足 $dis(a, b) \\ge x$。转化一下，即对于任意 $a, b$ 满足 $dis(a, b) \\lt x$，都有 $a, b$ 不在同一集合内。那么我们可以把所有满足 $dis(a, b) \\lt x$ 的边 $a \\leftrightarrow b$ 建出来，当且仅当新图是一个二分图，$x$ 合法。此时时间复杂度为 $O(n^3 + n^2\\log m)$。又注意到，对于新图中两个点 $a, b$，存在关系 $dis(a, b) \\lt x \\le p$，由于 $p$ 是原图中相邻两条边权值和的最小值，而 $dis(a, b) \\lt p$，这意味着 $a, b$ 一定在原图就已经相连。所以只需要从原图上把满足 $dis(a, b) \\lt x$ 的边拿出来建为新图即可。时间复杂度 $O(m \\log m)$。\n\n### 2025.7.3\n\n- [[Codeforces 407D] Largest Submatrix 3](https://codeforces.com/problemset/problem/407/D)\n\n  一道唐题，可是竟然不会。\n\n  设 $dp_{u, l, r}$ 表示下界为 $u$、左界为 $l$、右界为 $r$ 的最小上界。注意到 $dp_{u, l, r} \\le \\min\\{dp_{u - 1, l, r}, dp_{i, l + 1, r}, dp_{i, l, r - 1}\\}$，发现在这基础上，还需要满足 $a_{u, l} \\ne a_{i, r}, a_{u, r} \\ne a_{i, l}$。维护 $lst_{i, j}$ 表示第 $i$ 列中 $j$ 最后一次出现的位置即可。注意要特判一下 $l = r$。\n\n- [[Atcoder ABC176F] Brave CHAIN](https://atcoder.jp/contests/abc176/tasks/abc176_f)\n\n  第一眼感觉这个题好像来财啊。我们把每次操作剩下的左侧的两张牌叫做手牌。考虑什么时候能够产生贡献。\n\n  - 三张新牌相同。此时手牌状态不变。\n\n  - 有两张新牌相同，且手牌中有一张与它们相同。此时会将手牌中的相同的那张打出，并换来新牌中不同的那张。\n  - 两张手牌相同，且新牌中有一张与它们相同。此时会打出两张手牌，并换来新牌中不同的两张牌。\n\n  上面三项对应的状态更新如下。（$\\leftarrow$ 默认取 $\\max$）\n\n  - 直接全局 $+1$。\n  - （假定 $x = y \\ne z$）$dp_{i, z} \\leftarrow dp_{x, i} + 1$\n  - （假定 $x$ 与两张手牌相同）$dp_{y, z}\\leftarrow dp_{x, x} + 1$\n\n  引入通配符 $0$，表示 $f(0) = \\max\\{f(x)\\}$。以下是无贡献的状态更新。（$x, y, z$ 可相互替换。）\n\n  - $dp_{i, x} \\leftarrow dp_{i, 0}$\n  - $dp_{x, y} \\leftarrow dp_{0, 0}$\n\n  容易发现每一轮一共只有 $O(n)$ 级别的状态更新，所以我们只需要在当前状态的基础上修改即可。另外注意，以上所有操作都是同时进行，所以需要提前存储操作信息。时间复杂度 $O(n^2)$。\n\n### 2025.7.4\n\n- [[洛谷 P2568] GCD](https://www.luogu.com.cn/problem/P2568)\n\n  推式子即可。并不想打公式，~~详见原题题解~~。\n\n- [[Codeforces 1114F] Please, another Queries on Array?](https://codeforces.com/problemset/problem/1114/F)\n\n  ~~看题的时候没看到 $a_i, x \\le 300$，所以想了一会儿直接去看题解了。~~\n\n  要维护区间乘与区间积的欧拉函数，发现区间积可能很大，不能直接分解质因数。所以考虑维护原数的质因子，发现 $\\le 300$ 的质数个数恰好是 $62$，可以用 ``long long`` 维护。而一些数的乘积的质因子状态，即其中每个乘数的质因子状态的或和。区间修改也是类似的道理。\n\n### 2025.7.6 蒸蒸日上\n\n这已经是七月的第 $5$ 篇日祭了，我们的日祭正在**蒸蒸日上**！\n\n- [[Codeforces 2119D] Token Removing](https://codeforces.com/contest/2119/problem/D)\n\n  神秘 DP。[题解](/articles/CF2119D-Token-Removing-题解/)。\n\n### 2025.7.7\n\n今天 VP [Codeforces Round 1036, Div. 1 + Div. 2](https://codeforces.com/contest/2124)。\n\n- [[Codeforces 2124E] Make it Zero](https://codeforces.com/contest/2124/problem/E)\n\n  沟槽的构造题，并不想记严格的证明。大概就是找到一个位置 $pos$ 满足 $s_{pos - 1} \\lt \\frac{s_n}2 \\le s_{pos}$，然后分为 $[1, pos), \\{pos\\}, (pos, n]$ 三段，设三段的和分别是 $x, y, z$，我们只需要找到一个 $w$ 使得 $(x - w) + (z - w) = y$，接下来可以在两步内解决。再把前两步合并，就变为了第一段清空，第二段减去 $x - w$，第三段减去 $w$，剩下的就是第二步。\n\n### 2025.7.8\n\n模拟赛挂了 $200\\ pts$，不然 $310\\ pts$。\n\n第四题不会，所以也没什么题需要改。\n\n### 2025.7.9\n\n- [[Atcoder JOISC2014J] 電圧](https://atcoder.jp/contests/joisc2014/tasks/joisc2014_j)\n\n  要使这条边端点颜色相同，且删掉这条边后图形成二分图，那么这条边在所有奇环中，且不在任意一个偶环中。\n\n  考虑建 DFS 树。对于树边，我们可以通过树上差分维护出当前边属于的奇环与偶环数量。对于非树边，根据奇环数量来讨论：若有且仅有一个奇环，则该非树边合法；若有多个奇环，且存在一对奇环没有交集，那么没有树边合法；若有多个奇环，且这些奇环都相交，那么必定会形成更大的偶环，那么没有树边合法。综上所述，只用讨论合法的树边数量，并特判奇环是否只有恰好一个即可。\n\n### 2025.7.10\n\n- B - 树\n\n  题意转化后即动态维护树的直径，具体需要支持向树中加点。\n\n  考虑当两棵树合并的时候直径会怎样。容易发现，新树直径的端点一定由原树直径的端点产生，一一判断即可。考虑使用线段树维护区间直径，支持单点修改即可。\n\n### 2025.7.12\n\n~~线段树合并要把我的左脑和右脑合一起了。~~\n\n这篇日祭是线段树合并学习笔记，未来会有补充。\n\n线段树合并顾名思义，就是把两棵线段树的信息按照特定的规则合并起来，一般与动态开点配合使用。\n\n线段树合并常用于优化 DP，尤其是树形 DP（与 DAG 上的 DP），用来优化 DP 转移。（或者是一些需要在树 / DAG 上进行信息转移的东西。）\n\n比如一个树形 DP 的转移方程如下：\n$$\ndp_{u, i} \\mathop{\\leftarrow}_{v \\in son(u)} dp_{v, ?}\n$$\n我们需要将儿子的信息转移到父亲上，而每个节点存储的又是一个数组，常规的做法是一一合并，转移的时间复杂度为 $O(n^2)$。\n\n而对于一些转移方程，我们会发现合并信息的操作可以用线段树合并来优化。于是我们就将转移的时间复杂度优化为了 $O(\\log n)$（线段树合并的时间复杂度）。\n\n具体的，假设现有 $n$ 棵线段树，每颗线段树维护的是 $dp_i$，那么对于 $u$，转移操作就是将 $\\forall v \\in son(u), dp_v$ 合并到 $dp_u$ 上。\n\n可这时我们会发现，开 $n$ 棵线段树空间显然不够，又发现在 DP 过程中其实有很多空节点（$dp_{u, i} = 0$），这些空节点是无用的。所以自然地会想到动态开点。\n\n于是你就写出了线段树合并。\n\n---\n\n- [[Vani有约会] 雨天的尾巴 /【模板】线段树合并](https://www.luogu.com.cn/problem/P4556)\n\n  首先可以把区间修改通过差分变成单点修改。\n\n  对于 $u$，我们需要维护它每种救济粮的数量与最多的救济粮的种类，显然使用线段树维护。因为我们做了树上差分，所以 DFS 的时候要做一次树上前缀和，即将 $dp_u$ 和 $\\forall v \\in son(u), dp_v$ 合并起来。\n\n  于是就做完了。时间复杂度 $O(n \\log n)$，但常数极大。\n\n  > 另外记一种树链剖分的做法，其实就是离线的树剖。\n  >\n  > 先正常树剖一下，然后你就会得到 $\\log n$ 个 dfn 序连续的区间。\n  >\n  > 由于是离线，所以可以用差分标记这些区间。\n  >\n  > 所有操作结束后，用权值线段树进行一次前缀和即可。\n  >\n  > 时间复杂度 $O(n \\log^2 n)$，常数极小。\n\n- 【TBD】\n\n### 2025.7.13\n\n- A - [[UVA 12170] Easy Climb](https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=243&page=show_problem&problem=3322) & [[SPOJ CCROSS] Cross Mountain Climb](https://www.spoj.com/problems/CCROSS/)\n\n  ~~赛时基本想到了但是没做出来。~~\n\n  显然有 $O(nV)$ 的朴素 DP（单调队列优化）。\n\n  可以感知到，$\\forall i \\in [1, n], \\exists j \\in [1, n], h_i' \\equiv h_j (\\mathrm{mod}\\ d)$。（我也不知道我赛时是怎么感知到的，总之就是感知到了。）\n\n  即，$\\forall i \\in [1, n], \\exists j \\in [1, n], h_i' \\in \\{h_j + kd \\mid j \\in [1, n], k \\in [-n, n]\\}$，那么有效的值的个数就来到了 $O(n^2)$。（为什么我想到了又没做出来呢？因为我思考的时候把 $k$ 取到 $[-10^9, 10^9]$ 了，然后就不会了。）\n\n  进行一下离散化再 DP 即可。\n\n- B - [[黑暗爆炸 4160] Exclusive Access 2](https://vjudge.net/problem/%E9%BB%91%E6%9A%97%E7%88%86%E7%82%B8-4160)\n\n  赛时写了一个没有正确性的乱搞做法，得了 70 pts。\n\n  我们可以把原题转化一下，看成把原图分成若干层（若干部，更严格的说法是用反链覆盖原图，即 dilworth 定理），使得每一层内两个点互不直接相连，求最小层数。发现就是求图的色数。先 $O(n2^n)$ 预处理一个子集是否有直接相连的元素，再 $O(3^n)$ 做 DP 即可。\n\n### 2025.7.14\n\n- [[洛谷 P3623] [APIO2008] 免费道路](https://www.luogu.com.cn/problem/P3623)\n\n  一个做法是直接取 $k$ 条鹅卵石路。\n\n  可是发现这么做没有正确性。\n\n  因为容易发现有一些鹅卵石路是必选的。\n\n  那么我们可以先做一次 kruskal，并且先选水泥路，再选鹅卵石路。第一次被选中的鹅卵石路就一定包含了必选的鹅卵石路。\n\n  所以接下来只用再做一次 kruskal，先取够 $k$ 条鹅卵石路，再取水泥路。\n\n- [[洛谷 P8386] [PA 2021] Od deski do deski](https://www.luogu.com.cn/problem/P8386)\n\n  看了题解觉得很简单但是自己就是做不起的 DP。\n\n  首先容易发现一个合法的序列一定可以表示为若干个首尾相同的串相连。\n\n  换句话说，我们可以在一个合法的序列后面再加上一个首尾相同的串以得到一个新序列。\n\n  再换句话说，对于任意一个序列，我们可以通过在末尾增加一个特定的元素，让它与原序列中的某个相同元素匹配成一个区间，以让新序列合法。\n\n  考虑 DP，设 $dp_{i, j, 0/1}$ 表示考虑了 $[1, i]$，当前有 $j$ 个左端点（新数与它们匹配后能使新序列合法，并且它们被匹配一次后依旧可以被匹配），当前序列是否合法的方案数。那么有四种 DP 转移。\n\n  - $dp_{i - 1, j, 1} \\times j \\to dp_{i, j, 1}$，新加的元素与左端点匹配，原本合法的序列现在依旧合法。\n  - $dp_{i - 1, j - 1, 1} \\times (m - j + 1) \\to dp_{i, j, 0}$，原本合法且有 $j - 1$ 个左端点，现在增加一个无法匹配的元素使它不合法，但增加了一个左端点。\n  - $dp_{i - 1, j, 0} \\times j \\to dp_{i, j, 1}$，原本的序列不合法，现在增加了一个可以匹配的元素，使新序列合法。\n  - $dp_{i - 1, j, 0} \\times (m - j) \\to dp_{i, j, 0}$，原本不合法的序列，现在加一个无法匹配的元素，依旧不合法。\n\n  答案是 $\\sum_{j = 1}^n dp_{n, j, 1}$。注意到 $j \\le i$，所以时间复杂度是 $O(n^2)$。\n\n- HJJOI Day2 A 堆\n\n  先转化一下题意，看成先插入元素再删除元素。注意到，如果插入的元素是当前的最大元素，那么直接删除它；在这样的条件下，其它被删除的元素一定是单调不增的。所以只需要一个桶与一个指针维护当前的最大元素即可。\n\n- [[洛谷 P3960] [NOIP 2017 提高组] 列队](https://www.luogu.com.cn/problem/P3960)\n\n  [题解](/articles/P3960-NOIP-2017-%E6%8F%90%E9%AB%98%E7%BB%84-%E5%88%97%E9%98%9F-%E9%A2%98%E8%A7%A3/)。\n\n- [[LOJ 6029] [雅礼集训 2017 Day1] 市场](https://loj.ac/p/6029)\n\n  挺有趣的势能线段树。\n\n  看到取模、开根这一类运算容易想到势能线段树，除法也是。但这道题的难点就在于难以看出是哪个数据最终会趋于不变。\n\n  动用人类智慧，发现是极差。对于加法操作，并不会改变极差，而除法至少可以让极差减半，即在 $\\log V$ 次内变为 $0$。\n\n  先写一个正常的线段树，然后单独实现除法操作。\n\n  注意到，当一个区间的极差为 $0$ 即所有元素相同时，区间除法相当于区间加法，所以直接做一个区间加标记即可。\n\n  另一个可以像上面这样处理的情况是，最初极差为 $1$，操作后极差依然为 $1$，此时区间除法与区间加法也是等价的。\n\n  单独讨论一下上述两种情况并直接返回，其它情况继续递归下去即可。\n\n  时间复杂度是 $O(q \\log n \\log V)$，不会证。\n\n  > 在 sjx 的讲义中，还讨论了最初极差为 $1$，操作后极差为 $0$ 的情况，此时区间除法等价于区间覆盖，所以似乎还要单独实现区间覆盖，导致代码更屎，所以干脆不讨论这种情况，直接暴力递归即可。（甚至可能会赢过两个 lazy tag 的常数。）\n\n### 2025.7.15\n\n- [[洛谷 P8990] [北大集训 2021] 小明的树](https://www.luogu.com.cn/problem/P8990)\n\n  终于也是洛谷首黑了。这题的转化好妙啊。\n\n  美丽的定义的转化如下：对于任意一个白点，它的子树中都是白点 $\\to$ 对于任意一个黑点，它的父亲一定是黑点 $\\to$ 所有的黑点构成一个连通块 $\\to$ 黑点个数减去黑边个数等于 $1$。当一棵树是美丽的，因为所有黑点构成一个连通块，所以白色连通块的数量等于黑白边的数量。于是我们就可以用一棵线段树维护每个时刻的黑色连通块数量（即黑点个数减去黑边数量）与白色连通块数量（即黑白边数量）。对于每一条边，容易处理出它在哪个时间段是一条黑边（可以给黑色连通块数量带来 $-1$ 的贡献），在哪个时间段是一条黑白边（可以给白色连通块数量带来 $+1$ 的贡献），当然改边也是容易处理的，实际就是撤销一条边再加一条新边。\n\n  这个时候还缺了一步。我们要求的并不是每个时刻的白色连通块数量之和，而是**黑色连通块数量为 $1$** 时的白色连通块数量之和。我们可以通过维护黑色连通块数量的 $mn, mncnt$ 与当黑色连通块数量取到 $mn$ 时对应时刻的白色连通块数量之和 $sum$ 来解决这个问题。修改白色连通块数量时，我们只需要将 $sum$ 加上 $mncnt \\cdot \\Delta$ 即可。由于在第 $n - 1$ 个时刻（与第 $n$ 个时刻）黑色连通块数量一定为 $1$，所以 $mn$ 一定为 $1$。\n\n- [[QOJ 7980] 区间切割](https://qoj.ac/contest/1457/problem/7980)\n\n  这不是人类智慧是什么？\n\n  先考虑离线下来，记 $time_i$ 表示位置 $i$ 被切割的时间，那么依次处理区间 $[1, n]$，就可以做到实时记录 $time$。对于一个区间，发现它在随机数据下，长度会快速减小，且最多被切割 $\\log m$ 次，所以可以每次直接找到当前区间内 $time$ 的最小值，然后从最小值对应位置处切割。但是对于非随机数据，一个区间可能会被切割 $m$ 次（从左往右切），显然不能沿用上面的做法。区间被切割的次数多的原因是有许多切割的位置都很靠近端点，导致长度减小缓慢。所以我们充分发扬人类智慧，对于一些靠近端点的切割操作，直接更新端点；对于一些处于区间中部的切割操作，再沿用上述做法。\n\n  可是“靠近端点”具体又应该是处于区间的什么位置呢（比如前 $\\frac 1 4$）？或者说“区间中部”的长度应该取到多少，才能既保证正确性又保证时间复杂度呢？\n\n  若中间块太长，则会导致区间长度减小依然缓慢，而当中间块较短时则可保证区间长度较快减小。所以我们要尽可能最小化中间块长度。若中间块太短，在进行一系列对区间两端的切割操作后，我们并不能保证中间块一定会被保留下来；而当中间块长度大于两侧长度时，在进行一系列对区间两端的切割操作后，我们一定可以保证中间块被保留。综上所述，我们只需要将区间三分即可。\n  \n  具体实现上，我们需要一棵线段树维护 $time$，它需要支持单点修改、区间查询（查询区间中间段的最小值）、查询给定位置左 / 右侧第一个小于给定值的位置（查询两端的切割情况）。对于第二类查询，需要使用线段树二分。对于区间的迭代，只需要按题解模拟即可，先直接更新左右端点，再进行区间切割。时间复杂度 $O(n \\log^2 m + m \\log m)$。\n  \n- [[Codeforces 461B] Appleman and Tree](https://codeforces.com/problemset/problem/461/B)\n\n  设 $dp_{i, 0/ 1}$ 表示考虑到第 $i$ 个点，当前点是否与黑点在一个连通块的方案数。转移时直接考虑是否删除当前边即可。\n\n- [[洛谷 P3177] [HAOI2015] 树上染色](https://www.luogu.com.cn/problem/P3177)\n\n  直接考虑染色对答案的贡献。设 $dp_{i, j}$ 表示考虑到第 $i$ 个点，以当前点位根的子树中有 $j$ 个黑点的贡献。做一个树上背包，价值是以儿子为根的子树与其他节点能产生的匹配次数（即经过当前边的次数）乘以当前边的权值。注意转移时要控制好变量的上下界，否则会被卡成 $O(n^3)$。\n\n### 2025.7.16\n\n踩一脚 2025.1.17，现在比那时候还是有了一些进步。（现在很难想象之前有段时间天天都只考几十分，接近垫底，但是竟然没觉得什么。）\n\n怎么说呢，教练和家长也都给我聊了好多次了，也是该到努力的时候了。我之前确实学习就没有真正用过全力，所以今天教练说我潜力很足，我也这么认为。只是说面临的困难也挺多的，比如我心理上的一些问题。我无法解决，所以只有尝试不想那些事情，尝试逃避问题。\n\n---\n\n今天上午考试，一道不会。下午应该是因为天气比较热，所以人有些浮躁，状态不是特别好，效率很低，听课也没怎么听进去，一天只做了一道题，也是成为了 HJJOI 集训期间的前缀最小值。\n\n- [[Codeforces 1967D] Long Way to be Non-decreasing](https://codeforces.com/problemset/problem/1967/D)\n\n  就当是学习基环树了。\n  \n  赛时看出来这题与基环树有关，可是居然没看出来是二分（打脸）。\n  \n  二分答案 $x$，转化为判定性问题，我们需要对 $a$ 中每个元素操作最多 $x$ 次使其单调不降。由于目标是单调不降，所以只需要使用一个变量 $lst$ 表示当前 $a$ 中的最后一个元素，那么一个新元素就需要在 $x$ 次操作以内变为一个不小于 $lst$ 的数。将 $lst$ 从小到大枚举，找到最小的 $lst$ 满足这个新元素可以在 $x$ 次操作以内变为 $lst$，若 $lst \\gt m$ 则无解，否则有解。\n  \n  那么现在就转化为了计算一个数在几次操作后能变为另一个数。对于所有 $i \\to b_i$ 建图，此时会形成一个内向基环树森林，我们只需要计算基环树上两点的距离，就是一个数转化至另一个数的操作次数。\n  \n  对于基环树的处理，可以使用并查集维护连通性，形成环时忽略当前边，使其形成一棵树。计算两点距离时需要分讨一下两点的位置关系。\n\n### 2025.7.17\n\n这两天状态不好，所以 7.17 和 7.18 都没做什么题，日祭也是 7.19 才补的。\n\n- [[洛谷 P5903] 【模板】树上 K 级祖先](https://www.luogu.com.cn/problem/P5903)\n\n  长链剖分的主要用法就是求树上 $K$ 级祖先和优化 DP。优化 DP 就类似于 dsu on tree，只是一个与树的大小有关，一个与树的深度有关。\n\n  求树上 $K$ 级祖先的方法如下：树剖时对于长度为 $len$ 的链，需要预处理出链顶的 $1 \\sim len$ 级祖先与 $1 \\sim len$ 级儿子（即链中元素）。另外还需要预处理出 $2^x$ 级祖先。对于每组询问，先向上跳 $2^{\\log K}$，此时当前点所在长链的长度至少为 $2^{\\log K}$。接下来再跳到当前链链顶，再向下或向上把剩下的跳了。\n\n### 2025.7.18\n\n- [[P4719] 【模板】动态 DP](https://www.luogu.com.cn/problem/P4719) & [[P4751] 【模板】动态 DP（加强版）](https://www.luogu.com.cn/problem/P4751) & [[P5024] [NOIP 2018 提高组] 保卫王国](https://www.luogu.com.cn/problem/P5024)\n\n  三倍经验是个好东西。\n\n  并不想记具体的过程，所以就大概记一下。\n\n  对于 P4719，可以先写一个朴素的 DP。对于每一次修改，就需要更新从当前点到根路径上的每个点。因为是路径更改，所有考虑~~熟练剖粪~~树链剖分。尝试把原来的 DP 方程写成一种神秘的矩乘形式，然后对于每一次修改就变成了修改路径上轻边的转移方程（矩阵），答案就是整棵树重链上的矩阵的乘积。\n\n  对于 P4751，我们只需要使用动态开点线段树，对于每一条重链单独开线段树，这样可以减少线段树的查询次数，可以优化至少 $\\frac 2 3$ 的常数。\n\n  对于 P5024，容易注意到最小覆盖集 = 全集 - 最大独立集，那么就可以直接做了。对于修改操作，若要强制选则将权值设为极小值，否则将权值设为极大值。注意算出来的答案是改变权值后的答案，所以输出时还要稍微处理一下。\n\n### 2025.7.21\n\n- [[洛谷 P8352] [SDOI/SXOI2022] 小 N 的独立集](https://www.luogu.com.cn/problem/P8352)\n\n  DP 套 DP 板子。设 $dp_{u, i, j}$ 表示考虑到点 $u$，强制不选的答案为 $i$，不强制不选的答案为 $i + j$，直接转移即可。（其实是我不想写。）\n\n- [[洛谷 P5904] [POI 2014] HOT-Hotels 加强版](https://www.luogu.com.cn/problem/P5904)\n\n  长链剖分优化 DP 板子。\n\n  对于原题，容易写出一个 $O(n^2)$ 的 DP，发现 DP 数组的大小与深度有关，所以进行长链剖分即可。\n\n## 2025.8\n\n这个月的日祭直接写一起了，基本都在补题。\n\n注意到 7 月份后来状态不好。\n\n- [[洛谷 P4198] 楼房重建](https://www.luogu.com.cn/problem/P4198)\n\n  考虑用一棵普通线段树维护，每个节点维护区间的最大值与区间内好的序列的长度，push up 的时候需要写一个类似于线段树二分的东西，时间复杂度 $O(n \\log^2 n)$。\n\n- [[洛谷 P9824] [ICPC 2020 Shanghai R] Fountains](https://www.luogu.com.cn/problem/P9824)\n\n  复杂度好神秘的一道题。~~自己写写不清楚，所以干脆看题解吧。~~\n\n- [[洛谷 P6189] [NOI Online #1 入门组] 跑步](https://www.luogu.com.cn/problem/P6189)\n\n  ~~显然可以 oeis。~~\n\n  本题就是正整数拆分问题。考虑正整数拆分的做法。一种 DP 是设 $dp_{i, j}$ 表示用了 $1 \\sim i$，当前和为 $j$ 的方案数，转移是 $dp_{i, j} = dp_{i - 1, j} + dp_{i, j - i}$。另一种 DP 是设 $dp_{i, j}$ 表示选了 $i$ 个数，当前和为 $j$ 的方案数，转移是 $dp_{i, j} = dp_{i - 1, j - 1} + dp_{i, j - i}$。发现第一种 DP 与拆分的数的值域有关，第二种与拆分的数的数量有关。所以考虑根号分治，对于 $\\le \\sqrt n$ 的数进行第一种 DP，其它的进行第二种 DP。\n\n- [CWOI 0819 B组] C - 盲盒流水线\n\n  注意到这场因为 B 屎一样的题面搞乱了节奏？（不要给自己找借口了。）不过要是 JDS 不提醒我 A 可能要挂完。\n\n  题意是区间背包。因为是区间，容易想到用数据结构维护。注意到背包可以 $O(m)$ 合并，那么写一个普通线段树的时间复杂度是 $O(n \\log n + q m \\log n)$，空间复杂度是 $O(n \\log n)$。慢的原因是合并次数太多，所以考虑减少合并次数。发现这个过程是静态的，所以选择猫树。可是发现直接猫树的空间复杂度是 $O(n^2 \\log n)$，所以需要把询问离线下来，每个区间单独处理即可。\n\n- [P13736 [JOIGST 2025] 日本浮现 / Japan Emerges](https://www.luogu.com.cn/problem/P13736)\n\n  气死我了怎么绿题都场切不了。（注意到可能是做提高组模拟赛有点膨胀导致的。）\n\n  看到连通立马想到并查集（为啥我没立马想到），看到最小立马想到二分答案转化为判定性问题，判定的时候按题意模拟即可，如果两个块会相连就合并起来。\n\n- [[洛谷 P13680] [IAMOI R2] 未送出的花](https://www.luogu.com.cn/problem/P13680)\n\n  注意到祖先的盛开度一定比孩子大，因为如果交换两个点的盛开度会导致答案不增。所以对于每个点，它的美丽度取的点的位置是固定的，所以可以统计对于每个点，它的盛开度会被作为多少个点的美丽度（记作 $cnt_u$）。若我们选择 $k$ 朵花送出，相当于要选若干个点使得 $\\sum_{u \\in S} cnt_u \\ge k$，最大化 $\\min_{u \\in S} w_u$，发现 $S$ 一定是一个包含根的连通块，所以直接树上背包即可。\n\n- [CWOI 0822 B组] B - 美丽值\n\n  题意略。容易想到拆贡献，考虑 $[i, i + 1]$ 一段会被计算多少次。设 $n$ 中有 $j$ 个数 $\\le i$，剩下的 $n - j$ 个数 $\\gt i + 1$，那么 $[i, i + 1]$ 会被计算 $\\min(j, n - j)$ 次。接下来考虑有多少个序列满足上述条件。首先从 $n$ 个数中选 $j$ 个数钦定为 $\\le i$，那么 $j$ 个数就可以任意在 $[1, i]$ 中生成，剩下 $n - j$ 个数同理。所以总答案是 $\\sum_{i = 1}^{v - 1} \\sum_{j = 0}^n \\min(j, n - j) \\cdot \\binom n j \\cdot j^i \\cdot (n - j)^{v - i}$。\n\n- [[Atcoder ARC101C] Ribbons on Tree](https://atcoder.jp/contests/arc101/tasks/arc101_c)\n\n  考虑容斥（？，注意到我不会容斥，是怎么考虑到的），答案为 $\\sum_S (-1)^{|S|} \\cdot f(S)$，其中 $f(S)$ 表示强制断开的边集为 $S$ 的方案数。注意到断开若干条边后，形成了若干个独立的连通块，那么每个连通块的方案数就是 $\\prod_{i = 1}^{\\frac n 2} (2i - 1)$（当 $n$ 是偶数时）。所以直接树上背包即可。\n\n- [[Atcoder ARC153D] Sum of Sum of Digits](https://atcoder.jp/contests/arc153/tasks/arc153_d)\n\n  好神秘的 DP。\n\n  发现难点主要在于进位。设 $dp_{i, j}$ 表示考虑到第 $i$ 位，上一位有 $j$ 个数向这一位进了位，目前答案的最小值（不包含当前这一位）。对于每一位，先对 $a$ 按当前这一位从大到小排序，那么进位的数字一定是 $a$ 的一个前缀。接下来就是直接转移，枚举进位个数、$x$ 当前这一位的值，然后统计当前数位的和与进位个数，再转移到下一位即可。\n\n- [CWOI 0824 B组] A - town\n\n  题意是将树分为若干个连通块，要求每个连通块的权值的异或和为 $x$，求方案数。\n\n  显然容易想到做树上背包，并且记录当前未闭合连通块的异或和。发现未闭合的连通块的异或和一定是 $xorsum$ 或 $xorsum \\oplus x$，所以只用设两个状态。需要特判 $x = 0$（赛时被这个 Corner Case 创飞了。）\n\n- [CWOI 0824 B组] B - str\n\n  很显然的 DP，处理 LCP 即可。但是赛时写的什么 KMP 处理 LCP？什么东西？\n\n- [CWOI 0824 B组] C - perm\n\n  什么惊人的注意力。\n\n  显然与置换环有关。把每个置换环拿出来，设大小为 $sz_i$，那么答案就是 $\\frac{n!}{\\prod sz_i !} \\cdot \\prod f(sz_i)$，其中 $f(x)$ 表示大小为 $x$ 的置换环的解数，然后出题人**注意到** $f(x) = x^{x - 2}$，特别地，$f(1) = 1$。\n\n---\n\nCodeforces Round 1044 (Div. 2)\n\n[Link.](https://codeforces.com/contest/2133)\n\n- D - Chicken Jockey\n\n  [Solution.](https://www.luogu.com.cn/article/oc6vew8g)\n\n- E - I Yearned For The Mines\n\n  todo\n\n- F - Flint and Steel\n\n  todo\n\n---\n\ntodo","tags":["记录"],"categories":["ESSAY"]},{"title":"[CF2133D] Chicken Jockey 题解","url":"/articles/CF2133D-Chicken-Jockey-题解/","content":"\nUpd. 修了一点笔误。\n\n显然是 DP，并且是稍微想一想就能发现性质的 DP。\n\n首先攻击的形式一定钦定若干个生物，打死这些生物，使得剩下的生物形成若干个堆叠。对于每个堆叠，我们再从下往上依次一个个打死。容易发现，若 $[l, r]$ 是一个独立的堆叠，需要的攻击次数是 $1 + \\sum_{i = l}^r h_i - 1$，减一与加一是因为除了第一个生物都会受到 $1$ 的跌落伤害。设前缀和数组为 $s$，那么上式就是 $s_r - s_{l - 1} - (r - l)$。\n\n注意到，为了减少攻击次数，我们会尽量增加摔落伤害。要增加摔落伤害，我们会从上往下打死钦定的生物。所以考虑倒着 DP，设 $dp_i$ 表示 $i$ 是钦定的生物之一，打死 $[i, n]$ 的生物的最少操作次数。初始状态是 $dp_{n + 1} = 0$。有转移：\n\n$$\ndp_i = \\min_{j = i + 2}^{n + 1}\\{dp_j + h_i + \\max(0, h_{i + 1} - i) + s_{j - 1} - s_{i + 1} - (j - i - 2)\\}\n$$\n\n答案是 $dp_1$。上式的具体含义是：打 $h_i$ 次把第 $i$ 个生物打死，第 $i + 1$ 个生物受到 $i$ 点跌落伤害后还需要打 $\\max(0, h_{i + 1} - i)$ 次，接下来区间 $[i + 2, j - 1]$ 的生物每个生物都会受到 $1$ 点跌落伤害，需要打 $s_{j - 1} - s_{i + 1} - (j - i - 2)$ 次。\n\n这个转移方程漏掉了 $j = i + 1$ 的情况，但是发现 $j = i + 1$ 时显然不优，所以也不用分讨。\n\n这个 DP 是 $O(n^2)$ 的，考虑优化。发现 $j$ 与 $i$ 是互相独立的，所以把 $i$ 与 $j$ 拆开变为：\n\n$$\ndp_i = \\min_{j = i + 2}^{n + 1}\\{dp_j + s_{j - 1} - j\\} + h_i + \\max(0, h_{i + 1} - i) - s_{i + 1} + i + 2\n$$\n\n所以实时记录 $\\ge i + 2$ 的 $j$ 中 $dp_j + s_{j - 1} - j$ 的最小值即可。时间复杂度 $O(n)$。\n\n[赛时提交记录](https://codeforces.com/contest/2133/submission/335389286)，这份代码中答案取的是 $dp_0$，但并不影响。","tags":["题解"],"categories":["ESSAY"]},{"title":"[ABC420G] sqrt(n²+n+X) 题解","url":"/articles/ABC420G-sqrt-n²-n-X-题解/","content":"\n$-10^{14} \\le X \\le 10^{14}$ 一眼根号复杂度。\n\n这道题应该有很多做法。我的做法是尝试消掉 $n^2$，使得关于 $n$ 只出现了一次项。\n\n$$\n\\begin{aligned}\n&设\\ \\sqrt{n^2 + n + X} = n + k (k \\in \\mathbb{Z})\\\\\\\\\n&\\therefore n^2 + n + X = n^2 + 2nk + k^2\\\\\\\\\n&\\therefore n + X = 2nk + k^2\\\\\\\\\n&\\therefore X = k^2 + 2kn - n\n\\end{aligned}\n$$\n\n那么就可以枚举 $k$ 解出 $n$，当 $n$ 是整数是才是合法解。$k$ 是根号级别的，但是为了保险，$k$ 的值域可以开大一点。\n\n[赛时提交记录](https://atcoder.jp/contests/abc420/submissions/68769089)，稍微卡了点常，所以写法有点沟槽。应该不卡常就用 set 去重也能过。","tags":["题解"],"categories":["ESSAY"]},{"title":"[ARC203C] Destruction of Walls 题解","url":"/articles/ARC203C-Destruction-of-Walls-题解/","content":"\n看到 $\\bf 0 \\le K \\le H + W$ 就显然分讨了。\n\n- Case 1：$K \\lt H + W - 2$\n  \n  此时显然无解。\n\n- Case 2：$K = H + W - 2$\n\n  此时答案即为从 $(1, 1)$ 走到 $(H, W)$ 的方案数，即 $\\binom{H + W - 2}{H - 1}$。\n\n- Case 3：$K = H + W - 1$\n\n  即在 Case 2 的基础上再选一堵墙拆除。发现对于任意一条从 $(1, 1)$ 到 $(H, W)$ 的路径，都可以选择其余任意一堵墙拆除。故答案为 $\\binom{H + W - 2}{H - 1} \\cdot \\binom{2(n - 1)(m - 1)}{1}$。\n\n- Case 4：$K = H + W$\n\n  发现此时又产生了两种情况。一种是路径长度依旧为 $H + W - 2$，另一种是路径长度为 $H + W$。\n\n  - Case 4.1：路径长度为 $H + W - 2$\n\n    即在 Case 2 的基础上再选两堵墙拆除。尝试延续 Case 3 的做法，答案为 $\\binom{H + W - 2}{H - 1} \\cdot \\binom{2(n - 1)(m - 1)}{2}$。可是发现此时会重复。具体地，当存在一个位置 $(x, y)$ 满足 $(x, y) \\to (x + 1, y), (x, y) \\to (x, y + 1), (x + 1, y) \\to (x + 1, y + 1), (x, y + 1) \\to (x + 1, y + 1)$ 四堵墙都被拆除时，这种拆除方案会被路径 $\\dots \\to (x, y) \\to (x + 1, y) \\to (x + 1, y + 1) \\to \\dots$ 与 $\\dots \\to (x, y) \\to (x, y + 1) \\to (x + 1, y + 1) \\to \\dots$ 各计算一次。\n\n    考虑计算被重复计算的方案数。考虑枚举 $(x, y)$，那么这里的答案为 $\\sum_{x = 1}^{H - 1} \\sum_{y = 1}^{W - 1} \\binom{x + y - 2}{x - 1} \\cdot \\binom{H + W - x - y - 2}{H - x - 1}$。考虑从路径计数意义上化简。假设 $(x, y)$ 和 $(x + 1, y + 1)$ 是一个点，那么上式相当于在计算 $(1, 1)$ 到 $(H - 1, W - 1)$ 的路径数。撤销假设，那么我们要选择路径中的一个点，将它视为 $(x, y)$，插入点 $(x + 1, y + 1)$，并把之后的点向右、向下各移动一个位置。可以选择的点有 $(H + W - 3)$ 个，所以上式化简为 $\\binom{H + W - 4}{H - 2} \\cdot (H + W - 3)$。\n\n  - Case 4.2：路径长度为 $H + W$\n\n    此时所有墙恰好用完，所以我们只用计算长度为 $H + W$ 的路径数量。当路径长度为 $H + W$ 时，一定走了一次回头路，即一定向上走了一步或向左走了一步。\n \n    若向上走了一步，那么在竖直方向上的总步数是 $H + 1$，而在水平方向上的总步数依然是 $W - 1$。发现，如果有一步是向上的，那么它的上一步和下一步都必须是向右的。由于一定存在一步向上，所以我们可以先提前使用两个向右的行动。此时在水平方向还剩下 $W - 3$ 步。我们先假设所有竖直方向上的行动都是向下的，那么此时答案为 $\\binom{H + W - 2}{H + 1}$。接下来，我们可以从竖直方向上的第 $2$ 步到第 $H$ 步之间任意选择一步，并将其“反转”，即在这一步前后各加一次向右的行动，并且将这一步修改为向上。所以答案为 $\\binom{H + W - 2}{H + 1} \\cdot (H - 1)$。\n \n    同理，若向左走了一步，那么答案为 $\\binom{H + W - 2}{W + 1} \\cdot (W - 1)$。\n \n  综上所述，这一部分的答案为：\n\n$$\n\\binom{H + W - 2}{H - 1} \\cdot \\binom{2(n - 1)(m - 1)}{2} - \\binom{H + W - 4}{H - 2} \\cdot (H + W - 3) + \\binom{H + W - 2}{H + 1} \\cdot (H - 1) + \\binom{H + W - 2}{W + 1} \\cdot (W - 1)\n$$\n\n代码是好写的，所以这里就不放了。","tags":["题解"],"categories":["ESSAY"]},{"title":"[ARC203B] Swap If Equal Sum 题解","url":"/articles/ARC203B-Swap-If-Equal-Sum-题解/","content":"\n首先，必要条件是两个序列的和相同。\n\n容易发现，操作是可逆的。所以考虑将 $a$ 和 $b$ 变为一种相对规则的形式，比如单调。由于单调不降与单调递增是对称的，所以接下来讨论单调不降。\n\n现在的问题是，能否将一个序列通过若干次操作变为单调不降的。考虑简化操作，变成：\n\n- 交换 ``0`` 与 ``0 0``\n- （或）交换 ``0 1`` 与 ``1``\n- （或）交换 ``1 0`` 与 ``1``\n\n注意到，当序列之和（即 $1$ 的数量）$\\ge 2$ 时，我们一定可以把所有的 $0$ 放在序列开头处，从而形成单调不降的序列。具体过程可以手模一下，这里不再展开。\n\n另外，当序列之和 $= 0$ 时显然有解。所以接下来单独讨论序列之和 $= 1$ 的情况。即此时序列中有且仅有一个 $1$。\n\n根据 $1$ 的位置分类讨论。发现，当 $1$ 的位置 $\\in (1, n)$ 时，我们可以通过一些操作将它放置到区间 $(1, n)$ 中的任意一个位置；当 $1$ 的位置是 $1$ 或 $n$ 时，那么我们无法改变它的位置。也就是说，当 $a$ 或 $b$ 中的 $1$ 在位置 $1$ 或 $n$ 时，当且仅当两个序列相等时才有解；其它情况下均有解。\n\n代码是好写的，所以这里就不放了。","tags":["题解"],"categories":["ESSAY"]},{"title":"[ARC203A] All Winners 题解","url":"/articles/ARC203A-All-Winners-题解/","content":"\n手模几个样例之后，容易发现构造：\n\n- 对于每个队伍，令其中 $\\lfloor \\frac m 2 \\rfloor$ 个人始终获胜，其中 $\\lfloor \\frac m 2 \\rfloor$ 个人始终战败。\n- 那么对于每一个始终获胜的人，都可以匹配到 $n - 1$ 个其他队伍的始终战败的人。同理，对于每一个始终战败的人，都可以匹配到 $n - 1$ 个其他队伍的始终获胜的人。\n- 当 $m$ 是奇数时，每个队还各有 $1$ 个人未被匹配。此时我们只能令其中一个人始终获胜。\n\n综上所述，答案为 $n \\cdot \\lfloor \\frac m 2 \\rfloor + m\\ \\mathrm{mod}\\ 2$。代码就懒得放了。","tags":["题解"],"categories":["ESSAY"]},{"title":"自述","url":"/articles/自述/","content":"\n本文是我的自述。写的时候思绪比较混乱，所以可能有些地方不太清楚。我很久之前就想写这种文章了，现在终于写好了。\n\n这篇文章里我并没有有意针对谁，所以请不要想多了。\n\n文章比较长，难免会有一些错别字，应该不影响理解。\n\n除了第一部分的大部分内容与后来更新的内容（用 ``Upd.`` 标注），其他都是我在 2025.7.19~20 写的。\n\n### Part. 1 人身攻击与自我怀疑\n\n\\* 第一部分是我前段时间写的，写得过于详细了（？），但是也不想改了，就这样了。\n\n$\\ \\ \\ \\ \\ \\ \\ $初一下的时候，我加入了班级合唱，花了很多时间排练。当时本来作业又多，排练又经常占晚自习时间，所以就只有经常熬夜或早起写作业。比赛前后几天，班上考了好几堂试，作业又不少，我在周二（2024.5.21）晚上回家后，就想一口气把作业做完。我做到了凌晨两点，我妈一直陪着我，她也很心疼我（做到那么晚），再加上平时作业一直都不少，我妈就想向班主任反映一下情况。由于我知道给班主任反馈没有好下场，他会各种在班上阴阳或者什么之类的，所以我不让我妈发。后来我妈又想到可以向另一位老师反馈，于是她就编辑了一条信息，发给了那位老师。信息的内容主要是先说明了我的情况，然后询问教学安排。中间有一句原话大概是“想知道教学安排是怎样的，现在搞得那么紧有什么意义。”\n\n$\\ \\ \\ \\ \\ \\ \\ $周三（2024.5.22）早上，班主任在班上原封不动地念了我妈发的信息（显然是另外那个老师直接原封不动转发给班主任了），然后质问“是哪个狗屁家长发的”，没问出来，就让昨天晚上熬了夜的人起立，一个一个问。我和另一些同学站了起来，但是我并没有承认那是我妈发的。随后班主任就让家委会的查，是谁发的，后来在 2h 内就查出了是我妈。然后课间操的时候班主任就把我拉到一边，给我讲了一大堆。具体讲了些什么已经记得不是太清楚了，其中有些话也许是说我妈多管闲事，说他很喜欢我，但是我妈太麻烦了，不过不会给我穿小鞋。随后下午小班会的时候他又在班上说了这个事情，说了些什么也记不清了，但应该和上午说的有些重合。\n\n$\\ \\ \\ \\ \\ \\ \\ $这件事就过去了**吗**？在接下来的一段时间，班主任多次在全班说我，说什么“让你爸再找个妈”“你妈更年期”之类的话。怎么说呢，这些事背后还有一个原因。\n\n> $\\ \\ \\ \\ \\ \\ \\ $在初一上的时候，我开学就当了副班长。后来由于各种原因，我实在不想当副班长了，我又不敢给班主任说，所以我爸我妈就去找班主任把我的副班长辞掉了。班主任觉得哪有家长给学生辞班干部的，又因为当时找班主任的时候我妈说的比较多，所以班主任就对我妈有了意见。\n\n> $\\ \\ \\ \\ \\ \\ \\ $另外，班主任后来是给我道了歉，但是是怎么道的呢？（我印象中）他在班上问我“我这样说你你没事吧”，然后我只好说没事，随后他又以开玩笑的语气去问另一个同学：“让你爸换一个不？”\n\n$\\ \\ \\ \\ \\ \\ \\ $接上文，后来我忍了几周，有一周在家里差点崩溃了，但是又没敢把这些事情说出来。第二周，由于班上一些琐碎的事，我在那周周六（2024.6.8）回家后心情不好，然后洗完澡之后和我爸我妈聊天，然后聊着聊着就把上述的那些事情套出来了。当时说出来过后，心里是极其崩溃，具体崩溃的程度难以形容，这里也不再具体描述。后来我爸我妈就决定了给我换班。那天晚上我大概三四点才睡。第二天他们带着我出去玩，可是开心不起来一点。\n\n$\\ \\ \\ \\ \\ \\ \\ $后来我爸我妈就找了校长给我转班，中间有些校长以及班主任的言论这里不再展开。\n\n$\\ \\ \\ \\ \\ \\ \\ $总而言之，那段时间，我疯狂怀疑我的家长。想象一个班主任在全班面前评价你的家长，真的难以分清到底是谁对。可是现在看来，也不重要了，因为不管谁是对的，又是谁伤害了我呢？显而易见。\n\n$\\ \\ \\ \\ \\ \\ \\ $这件事一直在我心中萦绕了许久，也许是直到初二上结束才完全放下吧。用一句歌词就是：\n\n>Screamed, 'f\\*\\*K you aIMee' to the night sky as the blood was gushing. But I can't forget the way you made me heal.\n\n### Part. 2 帮助 or 伤害\n\n$\\ \\ \\ \\ \\ \\ \\ $转班之后，倒也不存在什么不适应，唯一就是有些孤独，在新班级找不到有共同话题的人。虽然和原来班级的同学交往依旧很多，但是平时有的时候就会觉得有些空虚。这倒也没什么。\n\n$\\ \\ \\ \\ \\ \\ \\ $只是，我当时始终放不下初一下的事情。可能又由于某些原因，我心中似乎一直萦绕着什么不好的东西（我也记不清了）。后来在新班级遇到了一位同学，他简直像有读心术一样，第一次聊天就看透了我的内心，并且把他所看出来的都说出来了。我瞬间崩溃。（其实现在已经不知道当时除了初一下那件事我还放不下什么事。）后来的时间里，他经常和我聊天，想要开导我，把我内心不好的东西驱散开来。\n\n$\\ \\ \\ \\ \\ \\ \\ $可是，在他帮助我的过程中，他无意间会点破一些事情，反而会伤害到我。（我这里并不想绞尽脑汁地回忆具体的事情，毕竟这一部分不是重点。）于是，这样，我反而越来越崩溃，直到后来他让我去找心理老师，然后和心理老师聊完之后，他问我说心理老师说了些什么，我告诉了他，然后他在一个纸条上写了一个英语单词~~（其实他是用词典笔翻译的）~~：\n\n> incurable\n\n$\\ \\ \\ \\ \\ \\ \\ $然后我就突然意识到，为什么他说我没救了我就没救了？然后我逐渐意识到，有许多事情并不是会像他说的那样发展，反而他还在无意中“引导”我走向崩溃。于是接下来的几周，我和他疏远了许多。等我好了一些之后，我告诉他我后来意识到的事情，他也才意识到他的无意中许多话伤害到了我。后来我们把话说开了，关系也恢复如初。\n\n### Part. 2.5 退役？\n\n$\\ \\ \\ \\ \\ \\ \\ $2024.10，我备考 CSP-S，于是停了一个月课。那段经历倒是也挺有趣的。扯远一点，那段时间我很喜欢听 I Hate It Here，也许冥冥中也注定了初二下的一些事情。停课期间，我还是学了一些新知识，并且也练了许多题。\n\n$\\ \\ \\ \\ \\ \\ \\ $考完 CSP-S，炸了，贪心永远是我的噩梦，尽管 T2 还是一个很简单的贪心。赛时我死磕 T2（还没磕出来），导致几乎没有时间思考 T3。晚上和两个同学吃饭，一聊才发现，我反而是考得最差的。\n\n$\\ \\ \\ \\ \\ \\ \\ $回家路上，我爸妈给我说了许多。由于初一下的那些事情，我们一直都在做两手准备（直升或跳槽）。他们本来准备用我 CSP-S 的成绩去找其他学校，可是这下考炸了，于是他们让我先把 OI 放一放，准备冲中考。我当时坐在后座，听着挺难受的，想着难道只是因为我初二没拿到 CSP-S 一等奖就要让我“半”退役？（现在看来，要是真的准备中考，放下 OI，高一再学 OI，怎么还来得及。只是当时没想那么远。）挺崩溃的，我已经快要哭出来了，但是还是忍住了。回家之后，我妈还在一直说，我实在受不了，哭着让她先别说了。然后她来了一句：\n\n> 还学不学嘛！\n\n$\\ \\ \\ \\ \\ \\ \\ $然后我就崩溃了。当时的状态用一句歌词就是：\n\n>We must know, how did it end?\n\n$\\ \\ \\ \\ \\ \\ \\ $后来，我爸妈又找教练聊了几次，最终还是让我呆在 CW，继续学 OI。中间我和我爸妈也有一段冷战期，关系很不好，不想展开写了。只是后来，我妈经常拿我 CSP-S 失误作为一个例子，说什么是因为老师表扬多了飘了？我也是无语了。\n\n### Part. 3 青春\n\n$\\ \\ \\ \\ \\ \\ \\ $本来想好好写一下这部分，但是太中二了，并且可能不太合适，所以我就写一下我当时的状态。\n\n$\\ \\ \\ \\ \\ \\ \\ $转班之后，~~可能是太闲了~~，我渐渐进入了心理上的青春期，也发生了许多~~中二~~有趣的事情。具体不方便说，但是总而言之，也只有“青春”一词能形容青春了。那段经历在当时看来：\n\n> That's the kind of heartbreak time could never mend.\n\n$\\ \\ \\ \\ \\ \\ \\ $而现在看来，那就是独一无二的青春吧。\n\n$\\ \\ \\ \\ \\ \\ \\ $Upd. 但是最后才知道，这一切只是一场骗局？``Love Of My Life`` or ``Loss Of My Life``？\n\n### Part. 3.5 变化\n\n$\\ \\ \\ \\ \\ \\ \\ $2024.12 中下旬，我也不知道我为什么又挺崩溃的，心情忽高忽低。2024.12.31，我得知：原班下学期要换班主任。\n\n$\\ \\ \\ \\ \\ \\ \\ $一下子觉得有些难以接受，这一切的变化都来得太快了，当时纠结了好几天，一直在从各方面考虑。当时具体想了些啥我不想再回忆了，总之就是挺忐忑的，因为未来充满了太多的不确定性。而最后，我还是决定回到原班。在新班考完期末拿了一个漂亮但没什么含金量的成绩后就回到了原班。\n\n$\\ \\ \\ \\ \\ \\ \\ $但是，这是相对正确的选择吗？我也不知道。\n\n---\n\n$\\ \\ \\ \\ \\ \\ \\ $其实前几学期的事情我已经记得不太清楚，也并不想花太多的笔墨写，但总而言之是挺崩溃的。过去的事已经过去了，但那些事情一定程度上也影响了我长期的状态，所以才一并写下来。后面的内容有许多是相互关联的，所以如果你愿意认真读一读，读一遍没读懂可以再多读一读。\n\n---\n\n### Part. 4 孤独与厌世\n\n$\\ \\ \\ \\ \\ \\ \\ $其实就如标题所说，孤独与厌世。回到原班之后，发现原班有些事情其实并没有想象中那么好，具体的不方便展开说，并且发现没什么人能给我提供情绪价值。于是就挺孤独的，经常也很烦躁（因为厌世）。正是因为烦躁，并且又没有什么人能陪伴我，所以有一两周真的非常崩溃，于是：\n\n> I hate it here so I will go to secret gardens in my mind.\n\n$\\ \\ \\ \\ \\ \\ \\ $所以我才说这首歌冥冥中注定了一些事情。\n\n$\\ \\ \\ \\ \\ \\ \\ $最崩溃的那段时间，我甚至借同学的螺丝刀把窗户上的钉子都拆了，可是我却没有跳下去的勇气（我很胆小）。后来，我也不知道为什么，我突然就习惯孤独了，觉得一个人很好。但是这也许只是自我保护吧，因为我知道我会一直孤独下去，于是只有让自己接受这个事实，以达到“解决”（实则是逃避）问题的效果。\n\n$\\ \\ \\ \\ \\ \\ \\ $只是后来，经常也会有一些莫名其妙的不好的情绪，我也说不出来是什么。然后我就想自残。但是我很胆小，所以我只敢自己咬自己。但是后来连自己咬自己都不敢了，因为淤青要几天才好，我害怕被家长或老师发现。\n\n$\\ \\ \\ \\ \\ \\ \\ $这个时候我或许还要再用一次这句歌词：\n\n> That's the kind of heartbreak time could never mend.\n\n$\\ \\ \\ \\ \\ \\ \\ $因为崩溃的时候，真的是心上一阵阵绞痛，而非单纯的不开心。\n\n$\\ \\ \\ \\ \\ \\ \\ $另外补充一个话题，就是关于我对于“知心朋友”或者说“真正的朋友”的定义。在这学期上半期，我的定义是“能给我提供精神价值的人”。具体地，我的知心朋友需要能和我放开地谈心，或者有着共同的爱好并且愿意相互讨论。这么一来，也许班上就几乎没人了，所以自然感到孤独。也许是太严格了吧，但是这就是我当时对“知心朋友”的定义（或者说要求）。这两周，我对“知心朋友”的定义又发生了一些变化：从心底关心我并且愿意帮助我的人。现在的条件似乎更加严苛了。我与其他人经历的事情不同，所以对朋友的要求不同也很正常。我的要求也许挺严苛的，但是我也接受（逃避）了没有知心朋友的事实。只是说，如果又知心朋友，我会好很多。\n\n### Part. 4.3 文化与 OI\n\n$\\ \\ \\ \\ \\ \\ \\ $我在这学期临近期末的时候有一个想法，就是下学期开学跟新高一一起“补”文化，然后就可以跟他们一起停课。第一，我是为了多争取一些训练时间；第二，停课之后，我就可以远离一些我不喜欢的东西，会轻松很多；第三，我不想学文化了。Upd. 但是我的主教练并没有同意，让我跟着原年级上文化课和竞赛。写这篇文章的时候应该教练已经给我说了，但是不知道为什么我没写上去。\n\n$\\ \\ \\ \\ \\ \\ \\ $先说一些题外话。我的家长与许多科任老师（包括竞赛教练）都说我在过去两年其实没有特别努力地学习，仅仅是完成老师的基本任务，这一点我是认同的，因为我确实不怎么努力。可尽管如此，我再也不想学文化课了，已经学厌了，一想到文化课就烦，一想到语数外三科都有暑假作业就烦（指 2025 年暑假）。果然 Waiting for Judging is unbelievable。（翻译：WJ is untrustworthy.）具体什么原因我也不知道，也许努力并不等于辛苦，我已经再也不想那么辛苦了。\n\n$\\ \\ \\ \\ \\ \\ \\ $接下来这段话也许并不应该放在这一部分，但是我也不知道应该放在哪里。这段话和第五部分有一些关联，但是比较负面，不想放在第五部分。\n\n$\\ \\ \\ \\ \\ \\ \\ $我爸妈一直都不让我打游戏，虽然我前段时间有偷偷打 florr，但是后来打着也没什么意思，所以退了。前段时间，我爸妈不让我刷短视频了，觉得我刷短视频刷太多了。然后昨天（2025.7.19），他们问老师说做作业（或者刷题之类）的时候听歌对效率有没有影响，老师说有，然后我昨天晚上为了稳妥一点就没听歌，然后被我妈表扬了，意思就是说也不让我在做作业或者刷题的时候听歌了，而我在家里的时候整天就在书房里，要么写作业要么刷题要么做一些自己的事情（比如写这篇文章）。现在他们又不让我做自己的事情，所以每次我做自己的事情时，只能跟他们说我在刷题，所以我做自己的事情的时候也不能听歌，所以我在家里的时候不能听歌；他们又害怕我在学校戴耳机太多导致听力下降，所以让我在学校少戴耳机。总而言之，就是他们不让我听歌，虽然我在学校的时候他们管不到，只是要是哪天把我耳机收了就老实了。\n\n$\\ \\ \\ \\ \\ \\ \\ $综上所述，我爸妈不让我打游戏不让我刷短视频不让我听歌，并且说“该努力了”。他们说他们也心疼我，但是觉得该冲一冲了。可是他们心疼只是他们心疼而已，甚至从来没想过我的感受。我可以努力学习，可是他们的要求却是想让我成为学习机器。\n\n### Part. 4.6 “就挺抑郁的”\n\n$\\ \\ \\ \\ \\ \\ \\ $前面也写了那么多了，一些重复的内容我也不反复阐述。前两天，有一天晚上，我和一个同学晚上聊了很久，把前面写的许多内容都给他讲了。另外还说了一些，比如说到我对知心朋友的定义的时候，我就提到：我之前的定义是能和我谈心，或者有共同话题并且愿意和我讨论的人，要说共同话题，那么无非就是 OI 和音乐。可是现在看来，我似乎没有之前那么喜欢 OI 了，说不清为什么，但就是没有之前那种热情了。尽管我知道接下来的任务很艰巨，但是我还是经常迷失方向。\n\n$\\ \\ \\ \\ \\ \\ \\ $然后同学听完我把所有说完过后，想了一会儿，说：\n\n> 其实这就显得挺抑郁的。抑郁的一种表现就是对之前喜欢的事物渐渐失去兴趣。\n\n$\\ \\ \\ \\ \\ \\ \\ $原话也许不是这样，但是是这个意思。然后我又崩溃了。后面他又和我聊了一些，比如有关自残和紫砂的内容。（然后恰好在第二天，我就看到了一篇有关生命教育的文章，我猜测可能我同学在之前就看到了那篇文章，然后恰好就把里面写的一些内容讲给我听了。）\n\n$\\ \\ \\ \\ \\ \\ \\ $不过好在，我现在还没有彻底放弃吧。（这是我和他聊完之后得到的结论。）所以还有希望。\n\n### Part. 5 两年之约\n\n$\\ \\ \\ \\ \\ \\ \\ $前面也有提到，我在学习上并不属于努力型。而现在我已经新初三了，想要拿到金牌并保送，其实非常困难。这一个月内，我家长、教练都已经给我鼓气了好几次，我自己也知道，我该努力了。看着洛谷上的 NOI 游记，之前我从未觉得这一切是多么残酷，打完两三天的比赛，该退役的就该退了，没有一点徘徊的余地。而现在，SC 已经成为了弱省，想要在弱省拿 NOI 金牌，真的很难。掰着手指算一算，距离高一参加 NOI，正好还有两年。要是高一拿不到金牌或者银牌高分，退役是必然的。两年有多长呢？回想两年之前发生了什么……小升初早培，这一切似乎还近在眼前。\n\n$\\ \\ \\ \\ \\ \\ \\ $我的实力也许确实比 NOI 金牌的（同期）水平差不少，但我现在确实该努力了。就算我水平不够，最后只能回归文化课，我也不希望将来的自己后悔现在没有努力。\n\n$\\ \\ \\ \\ \\ \\ \\ $可是客观来讲，前面提到的各种因素却成为了不小的困难，可是我也没有什么办法，只有麻醉自己，忘掉不好的事情吧。","tags":["记录"],"categories":["ESSAY"]},{"title":"P3960 [NOIP 2017 提高组] 列队 题解","url":"/articles/P3960-NOIP-2017-提高组-列队-题解/","content":"\n本文提供一种动态开点线段树做法。\n\n\n---\n\n> 这道题写的时候调了很久，原因是 ``while(q--)``，而处理询问时又用到了 $q$。\n\n另外，sjx 在讲义中这样写：\n\n> 为了解决空间问题，我们可以离线所有查询、删除和追加操作，然后 one by one 用线段树处理每个序列，每一个处理完后回滚到初始状态，再处理下一个。\n\n为了解决空间问题，直接动态开点不就是了。\n\n---\n\n我们发现，每一行是相对独立的，所以考虑单独处理。对于每一行的前 $m - 1$ 个元素与最后一列，我们需要维护单点查询、单点删除与末尾插入。暴力的单点删除显然不可取，那么容易想到用线段树标记每个元素是否已被删除，查询时用线段树二分找到被查询元素的真实位置。由于有末尾插入的操作，所以我们可以对每棵线段树先多开 $q$ 个位置。对于新加入的元素，我们并不把它实际地插入到线段树中，而是放到这一行（或列）对应的一个 ``vector`` 里面。\n\n具体地，对于一次操作，需要进行以下操作（假设 $y \\ne m$）：\n\n- 在第 $x$ 棵线段树上二分找到 $a_{x, y}$ 的真实位置，从而得到 $a_{x, y}$ 的值（并输出）；\n- 将 $a_{x, y}$ 插入到第 $n + 1$ 棵线段树（用于维护最后一列）的末尾；\n- 从第 $x$ 棵线段树中删除 $a_{x, y}$；\n- 在第 $n + 1$ 棵线段树上二分找到 $a_{x, m}$ 的位置，从而得到 $a_{x, m}$ 的值；\n- 将 $a_{x, m}$ 插入到第 $x$ 棵线段树的末尾；\n- 从第 $n + 1$ 棵线段树中删除 $a_{x, m}$。\n\n$y = m$ 时也类似，不再展开阐述。\n\n时间复杂度 $O(q \\log n)$。\n\n关于线段树节点数量，估算下来理论上限是 $1.2 \\times 10^7$，而实测下来 $4 \\times 10^6$ 已经足够了。\n\n---\n\n在代码实现中，线段树中的 ``0`` 指未被删除，``1`` 指已被删除，这样处理的目的是在末尾插入元素时不需要访问线段树元素。\n\n由于每个询问一定有解，所以线段树二分时没必要判断无解，整个过程也不需要考虑下标越界的问题，没什么细节，个人认为比较好写。\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\n\nint n, m, q, x, y, rt[300005], ps, val;\nvector<int> num[300005];\nstruct Segtree {\n    int tr[4000005], ls[4000005], rs[4000005], cnt;\n    void update(int l, int r, int& p, int s) {\n        if(!p) p = ++cnt;\n        if(l == r) return tr[p] = 1, void();\n        int mid = (l + r) >> 1;\n        if(s <= mid) update(l, mid, ls[p], s);\n        else update(mid + 1, r, rs[p], s);\n        tr[p] = tr[ls[p]] + tr[rs[p]];\n        return;\n    }\n    int query(int l, int r, int& p, int d) {\n        if(!p) p = ++cnt;\n        if(l == r) return l;\n        int mid = (l + r) >> 1, tmp = (mid - l + 1) - tr[ls[p]];\n        if(d > tmp) return query(mid + 1, r, rs[p], d - tmp);\n        else return query(l, mid, ls[p], d);\n    }\n} tr;\n\nsigned main() {\n    scanf(\"%lld %lld %lld\", &n, &m, &q);\n    for(int _ = 1; _ <= q; ++_) {\n        scanf(\"%lld %lld\", &x, &y);\n        if(y < m) {\n            ps = tr.query(1, m - 1 + q, rt[x], y); // step 1\n            if(ps < m) val = (x - 1) * m + ps;\n            else val = num[x][ps - m];\n            printf(\"%lld\\n\", val);\n            num[n + 1].push_back(val); // step 2\n            tr.update(1, m - 1 + q, rt[x], ps); // step 3\n            ps = tr.query(1, n + q, rt[n + 1], x); // step 4\n            if(ps <= n) val = ps * m;\n            else val = num[n + 1][ps - n - 1];\n            num[x].push_back(val); // step 5\n            tr.update(1, n + q, rt[n + 1], ps); // step 6\n        }\n        else {\n            ps = tr.query(1, n + q, rt[n + 1], x); // step 1\n            if(ps <= n) val = ps * m;\n            else val = num[n + 1][ps - n - 1];\n            printf(\"%lld\\n\", val);\n            num[n + 1].push_back(val); // step 2\n            tr.update(1, n + q, rt[n + 1], ps); // step 3\n        }\n    }\n    return 0;\n}\n```","tags":["题解"],"categories":["ESSAY"]},{"title":"[CF2119D] Token Removing 题解","url":"/articles/CF2119D-Token-Removing-题解/","content":"\n将题意转化一下，即我们要把 $n$ 个标记中的若干个放到区间 $[l_i, r_i]$ 内，且右端点各不相同的方案数。设 $dp_{i, j}$ 表示已经考虑了标记 $i \\sim n$，当前还剩 $j$ 个右端点没有使用的方案数。为什么要倒序遍历呢？因为标记 $i + 1 \\sim n$ 能使用的右端点，标记 $i$ 一定能使用。转移分两种情况讨论。\n\n- 若不选择当前这个标记，那么就多出了一个右端点。此时贡献是 $dp_{i + 1, j - 1}$。\n\n- 若选择当前这个标记，包含它的区间的左端点有 $i$ 中情况（$1 \\sim i$），区间右端点有 $j + 1$ 种情况（原本的 $j$ 个空余的右端点加上位置 $i$ 新产生的一个）。此时贡献是 $i(j + 1) \\cdot dp_{i + 1, j}$。\n\n所以 $dp_{i, j} = dp_{i + 1, j - 1} + i(j + 1) \\cdot dp_{i + 1, j}$，初始状态是 $dp_{n + 1, 0} = 1$，答案是 $\\sum_{i = 0}^n dp_{1, i}$。\n\n[提交记录](https://codeforces.com/contest/2119/submission/327725477)。","tags":["题解"],"categories":["ESSAY"]},{"title":"CW 机房规则怪谈","url":"/articles/CW-机房规则怪谈/","content":"\n原文作者为 [$\\text{\\color{red}{T}\\color{black}{wilight\\\\_ star}}$](https://www.luogu.com.cn/user/749406)，本文由 [$\\mathrm{\\color{red}{G}\\color{black}{etaway\\\\_ Car}}$](https://www.luogu.com.cn/user/725640) 补充。\n\n以下内容如果你认为侵犯了你的隐私或引起了你的不满，请联系我删除；如需修正或投稿，也请私信我。\n\n另：本文不区分“他”、“她”与“它”。\n\n# CW 机房规则怪谈\n\n## 常规篇\n\n- 如果你早上 7:30 以后才到机房并且在路上 or 机房门口遇见一个戴眼镜、板着脸的中年男子。请$\\color{red}不要与他对视$，并且要尽可能将自己装成是国际部的学生。注意，$\\color{red}\\text{他}$ 不属于这个机房，请不要让他注意到你是信竞学生。\n\n- 如果你在早上 7:40 发现机房里有除了上一条所述的中年男子以外的其他成年人在机房，请保持镇定并且快速离开。记住，$\\color{red}\\text{CW}\\ 信竞老师从不在\\ 7:40\\ 以前到达教室$，$\\color{red}\\text{他}$ 不是你的老师。\n\n- 如果你看到从门数第四列最靠近讲台的学生 [$\\text{\\color{red}{T}\\color{black}{wilight\\\\_ star}}$](https://www.luogu.com.cn/user/749406) 上午没有睡觉，请立即联系祝老师，$\\color{red}\\text{他}不是$ [$\\text{\\color{red}{T}\\color{black}{wilight\\\\_ star}}$](https://www.luogu.com.cn/user/749406)。\n\n- 当你早上十分困时，可以选择在机房睡觉，这样你会体验到 [$\\text{\\color{red}{y}\\color{black}{ishu2}}$](https://www.luogu.com.cn/user/17126) 专属叫醒服务。如果他不让你在机房睡，你可以去外面小桌子处睡觉。记住，你无法在困的时候做题，睡眠是最重要的。\n\n- 记住，每节课间 [$\\text{\\color{red}{d}\\color{black}{onaldqian}}$](https://www.luogu.com.cn/user/1033933) 都会贴在某个人后面，或者待在自己位置上看原神视频。如果他没有这样做，那么你眼前的人$\\color{red}绝对不是$ [$\\text{\\color{red}{d}\\color{black}{onaldqian}}$](https://www.luogu.com.cn/user/1033933)。请联系班长解决。\n\n- 如果你的电脑在开机时$\\color{red}没有卡顿$，请立即换一台电脑，小心 $\\color{red}他$ 在你写代码写到 $\\text{5KB}$ 时突然蓝屏。时刻记住，$\\color{red}\\text{CW}\\ 没有不卡顿的电脑$。\n\n- 如果有一天中午你发现 [$\\text{\\color{red}{W}\\color{black}{WW\\\\_ bilibili\\\\_ com}}$](https://www.luogu.com.cn/user/999916) 比你到机房更晚，请$\\color{red}\\text{立刻将他驱逐出境}$，因为他$\\color{red}绝对不是$ [$\\text{\\color{red}{W}\\color{black}{WW\\\\_ bilibili\\\\_ com}}$](https://www.luogu.com.cn/user/999916)。\n\n## 学习篇\n\n- 请不要相信 vjudge 专题上的排行榜，因为$\\color{red}有人藏题$。请不要藏题，这会使得大家都很愤怒。\n- 当你听 [$\\text{\\color{red}{J}\\color{black}{DScript0117}}$](https://www.luogu.com.cn/user/910593) 讲题时，如果你听不懂，必须保持微笑并适当地回应 [$\\text{\\color{red}{J}\\color{black}{DScript0117}}$](https://www.luogu.com.cn/user/910593) 的问题，可以点头但是频率不能太快。$\\color{red}不要被他发现你听不懂$，不然$\\color{red}会有严重后果$。\n\n\n## 考试篇\n\n- 当你遇见 [$\\text{\\color{red}{J}\\color{black}{DScript0117}}$](https://www.luogu.com.cn/user/910593) 出的模拟赛时，你可以选择请假，如果无法请假，请提前准备好消遣时间的方式，并且$\\color{red} 不要让他发现$，否则会有$\\color{red} 可怕的事情发生$。 \n- 考试时，如果发现 [$\\text{\\color{red}{J}\\color{black}{DScript0117}}$](https://www.luogu.com.cn/user/910593) 四处走动并且询问你的做题情况。$\\color{red}请不要理会他$，因为他要 $\\color{red}【数据删除】$ 了。此行为会让你的心态大幅下降，并影响你的专注度。\n- 你可以选择在开考后 1 min 开始猛敲键盘，让大家以为你已经切了一道题。不过，请适当使用该方法，$\\color{red}不然有可能被别人真实$。\n- 输出样例是一个好方法。\n- 当你发现有人 AK 模拟赛时，请立即仔细阅读其代码，并严格比对正解并尝试 hack，记住 $\\color{red}\\text{CW}\\ 模拟赛的 \\ \\text{AK}\\ 频率是\\ 1\\ 位/\\ 20\\ 场$（[$\\text{\\color{red}{J}\\color{black}{DScript0117}}$](https://www.luogu.com.cn/user/910593) 除外）。\n\n## 班长篇\n\n- 你可以永远相信你的班长，他会帮助你。\n- 当班长让大家保持安静时，请务必保持安静。不然$\\color{red}你会为此付出代价$。\n- 班长会视奸你们每一个人。\n\n# 机房生物图鉴\n\n## [$\\text{\\color{red}{y}\\color{black}{ishu2}}$](https://www.luogu.com.cn/user/17126)\n\n- 刷新频率：$\\text{\\color{green}{Common}} \\sim \\text{\\color{darkgrey}{Unique}}$\n\n  有时一整天都在机房，有时几天都不来机房。\n\n- 属性：~~**敌对**，会随时视奸机房里的每一个人~~\n\n- 获得好感方式：\n\n  - 认真学习 OI\n  - 在模拟赛 or 正式比赛中取得优异的成绩\n  - 造数据\n  - 讲题\n\n- 可能激怒他的行为：\n\n  - 在机房打游戏（激怒概率 $+\\infty\\%$）\n  - 在上课时段水（激怒概率 $90\\%$）\n  - 在上课时段说话（激怒概率 $80\\%$）\n  - 不认真对待模拟赛（激怒概率 $90\\%$）\n  - 上课睡觉（$100\\%$ 提供叫醒服务）\n  - whk 选手 whk 没考好（激怒概率 $200\\%$）\n\n- 应对方法：\n\n  - **认真学习 OI！**\n\n## [$\\text{\\color{red}{J}\\color{black}{DScript0117}}$](https://www.luogu.com.cn/user/910593)\n\n- 刷新频率：$\\color{purple} \\text{Epic}$\n\n  经常 disappear 去打球，晚自习经常消失。在机房刷新概率较低，经常说批话。\n\n- 属性：**中立**，可能具有攻击性\n\n- 获得好感方式：\n\n  - 陪他一起打羽毛球\n  - 给他彩虹糖\n  - 听他讲课并且完完全全听懂并且能回答对他的所有问题\n  - 帮他调**对**NOI模拟赛的代码\n  - 帮他验对他出的题并给出更优做法\n\n- 可能激怒他的行为：\n\n  - 听不懂还装懂（激怒概率 $101\\%$）\n  - 不听他讲题（激怒概率 $90\\%$）\n  - 模拟赛分数比他低（$110\\%$ 触发嘲讽技能）\n  - 做不起“唐B题”、“板子题”或询问“很唐的问题”（ $80\\%$ 概率触发辱骂技能，$50\\%$ 概率触发愤怒 ）\n  - 他自己挂分了（会触发红温技能）\n\n- 应对方法：\n\n  - 变得比他更强\n  - 在模拟赛中考得比他高\n  - 在他讲题前将题目 A 掉，这样 [$\\text{\\color{red}{y}\\color{black}{ishu2}}$](https://www.luogu.com.cn/user/17126) 就不会找他讲题了（最优解法）\n  - 在听他讲题时全部听懂\n  - 在听他讲题时没听懂，但是仍然笑脸相迎，时不时点头，注意频率不能过快。\n\n## [$\\text{\\color{red}{T}\\color{black}{wilight\\\\_ star}}$](https://www.luogu.com.cn/user/749406)\n\n- 刷新频率：$\\text{\\color{red}{Lengendary}}$\n\n  经常请假，原因是身体不好，实则是自己在家里内卷。\n\n- 属性：**友方**，是一位友善的班长\n\n- 获得好感方式：\n\n  - ？\n\n- 可能激怒他的行为：\n\n  - 在他做题的时候揉他的脸（激怒概率 $30\\%$）\n  - 莫名奇妙揉他（激怒概率 $50\\%$）\n  - 上课时段太吵（$70\\%$ 触发管理技能）\n\n- 应对方法：\n\n  - 揉他适可而止，注意察言观色\n  - 在上课时段保持安静\n\n---\n\n附：机房名单与座位表。\n\n|                            Col 6                             |                            Col 5                             |                            Col 4                             |                            Col 3                             |                            Col 2                             |                            Col 1                             |\n| :----------------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: |\n|                                                              | [$\\mathrm{\\color{red}{E}\\color{black}{van\\\\_ Leo\\\\_ Azir}}$](https://www.luogu.com.cn/user/901809) | [$\\text{\\color{red}{T}\\color{black}{wilight\\\\_ star}}$](https://www.luogu.com.cn/user/749406) | [$\\mathrm{\\color{red}{J}\\color{black}{DScript0117}}$](https://www.luogu.com.cn/user/910593) |                                                              |                                                              |\n| [$\\mathrm{\\color{red}{j}\\color{black}{effstart}}$](https://www.luogu.com.cn/user/482998) |                                                              |                                                              |                                                              | [$\\mathrm{\\color{red}{c}\\color{black}{flsfzh}}$](https://www.luogu.com.cn/user/429102) |                                                              |\n| [$\\mathrm{\\color{red}{m}\\color{black}{aichong}}$](https://www.luogu.com.cn/user/955369) | [$\\mathrm{\\color{red}{G}\\color{black}{etaway\\\\_ Car}}$](https://www.luogu.com.cn/user/725640) | [$\\mathrm{\\color{red}{A}\\color{black}{RIS1\\\\_ 0}}$](https://www.luogu.com.cn/user/846661) |                                                              | [$\\mathrm{\\color{red}{T}\\color{black}{G\\\\_ Space\\\\_ Station}}$](https://www.luogu.com.cn/user/416816) |                                                              |\n|                                                              | [$\\mathrm{\\color{red}{\\\\_ }\\color{black}{O\\\\_ v\\\\_ O\\\\_ }}$](https://www.luogu.com.cn/user/782941) | [$\\mathrm{\\color{red}{a}\\color{black}{lpharchmage}}$](https://www.luogu.com.cn/user/411141) | [$\\mathrm{\\color{red}{S}\\color{black}{unLegend}}$](https://www.luogu.com.cn/user/461452) |                                                              | [$\\mathrm{\\color{red}{Y}\\color{black}{org}}$](https://www.luogu.com.cn/user/617130) |\n|                                                              | [$\\mathrm{\\color{red}{x}\\color{black}{Alec}}$](https://www.luogu.com.cn/user/667558) |                                                              |                                                              | [$\\mathrm{\\color{red}{k}\\color{black}{anglr1013}}$](https://www.luogu.com.cn/user/717265) |                                                              |\n|                                                              |                                                              | [$\\mathrm{\\color{red}{4}\\color{black}{03notfound}}$](https://www.luogu.com.cn/user/https://www.luogu.com.cn/user/891150) | [$\\mathrm{\\color{red}{W}\\color{black}{WW\\\\_ bilibili\\\\_ com}}$](https://www.luogu.com.cn/user/999916) |                                                              |                                                              |\n| [$\\mathrm{\\color{red}{P}\\color{black}{aper27}}$](https://www.luogu.com.cn/user/1089037) | [$\\mathrm{\\color{red}{E}\\color{black}{ous}}$](https://www.luogu.com.cn/user/549131) |                                                              |                                                              |                                                              |                                                              |\n|                                                              |                                                              | [$\\mathrm{\\color{red}{\\\\_ }\\color{black}{anll\\\\_ }}$](https://www.luogu.com.cn/user/556545) | [$\\mathrm{\\color{red}{H}\\color{black}{D0X}}$](https://www.luogu.com.cn/user/545470) | [$\\mathrm{\\color{red}{\\\\_ }\\color{black}{U\\\\_ U\\\\_ }}$](https://www.luogu.com.cn/user/546159) |                                                              |\n|                                                              |                                                              |                                                              |                                                              |                                                              |                                                              |\n|                                                              | [$\\mathrm{\\color{red}{\\\\_ }\\color{black}{xguagua\\\\_ Firefly\\\\_ }}$](https://www.luogu.com.cn/user/905636) | [$\\mathrm{\\color{red}{d}\\color{black}{pfs}}$](https://www.luogu.com.cn/user/655119) | [$\\mathrm{\\color{red}{d}\\color{black}{onaldqian}}$](https://www.luogu.com.cn/user/1033933) |                                                              |                                                              |","tags":["闲话"],"categories":["ESSAY"]},{"title":"比亚迪吹气球大战","url":"/articles/比亚迪吹气球大战/","content":"\n## SCCPC 游记\n\n### Day $-\\infty$\n\n前两天才打完 CQ CCPC 并被 jmr 带飞并写了[游记](luogu://article/0lgncx4c)，今天就听说 SC CCPC 已经分组了。\n\n太好了，终于不和 jmr 一组了，这次和 Kaka 一组。（甚至还是二人队伍。）~~上次连上机的机会都没有呜呜呜。~~\n\n### Day $-\\infty + x$\n\n诶诶诶，初三的那几天要军训，所以不能和 Kaka 一组了。\n\n最后和 @[_O_v_O_](luogu://user/782941) 大佬讨论了一下，和他与 @[maichong](luogu://user/955369) 大佬一组了。\n\n### Day $-\\infty + x + 1$\n\n取队名了，叫做 ``rk -1 蒟蒻``。\n\n### Day $-\\infty + y$\n\n结果初三的军训可以请假，他们又可以去了。\n\n### Day $-1$\n\n今天早上从 CD 出发去 LS，中午去吃了临江鳝丝，下午在酒店写作业，晚上和 @[_O_v_O_](luogu://user/782941) 与 @[JDScript0117](https://www.luogu.com.cn/user/910593) 一起吃饭逛街。\n\n### Day $0$\n\n酒店就在学校旁边可是还开了车。~~路上因为买包子还被开了罚单，How sweet~~!\n\n到了学校，签了到，面积了两个人，入场准备开始。\n\n本来说好一人看几道题，结果开赛后也是直接开始乱看，我们的 _O_v_O_ 大佬也是在开赛 $50\\mathrm{min}$ 内贡献了 $I\\ -3$。接下来 maichong 大佬于 $65\\mathrm{min}$ 贡献了 $J\\ +$。在接下来的 $20\\mathrm{min}$ 内，我又想了想 $H$，_O_v_O_ 继续在想 $I$。我在 $88\\mathrm{min}$ 终于贡献 $H\\ +$。\n\n接下来，_O_v_O_ 觉得 B 及其简单，于是开始写 B，结果挂了。后来 _O_v_O_ 觉得是他的实现太差，然后就又给我讲了做法并让我写。我读了题可依旧没发现这个做法有什么问题，于是就开始写。写完了，交，又挂了。再仔细思考，发现是 _O_v_O_ 看错了题，最终贡献 $B\\ -2$。\n\n在这期间，我写了 $F$，可是中间因为一个小问题与见祖宗去了贡献 $F\\\\ -2\\\\ \\\\& +$。这期间其实 _O_v_O_ 和 maichong 也写了 $A$，一直没调出来，结果发现题目是单向边，他们写的双向边。\n\n此时时间是 $215\\mathrm{min}$。我也不知道为什么做得这么慢啊。\n\n接下来，我们的 _O_v_O_ 和 maichong 继续在写 $A$，最终贡献 $A\\ -9$，依旧没调出来。_O_v_O_ 转战 $K$，以为是什么玄学时间复杂度的暴力，结果挂了。\n\n在写完 $F$ 之后，我发现一个气球极其漏气，于是取下来各种方式吹，各种方式玩。（比如把气球的气放到自己嘴巴里之类的。）后来另一个气球也有点漏气（谴责 LSSFXY 打气球时没绑紧），于是 _O_v_O_ 也加入了我，我们 **一 起 吹 气 球**！只剩下 maichong 一个人还在专心做题，因为 $A$ 是调不出来一点。\n\n$310\\mathrm{min}$ 完赛，中间是因为设备原因全场推迟了 $10\\mathrm{min}$ 结束。于是就真成 CW rk -1 了。","tags":["游记"],"categories":["ESSAY"]},{"title":"[ABC407F] Sums of Sliding Window Maximum 题解","url":"/articles/ABC407F-Sums-of-Sliding-Window-Maximum-题解/","content":"\n一眼题啊。设 $a_i$ 左侧第一个**不比它小**的数的位置为 $lft_i$，它右侧第一个**比它大**的数的位置为 $rgt_i$。（这样可以保证既不漏算又不重复计算。）那么对于 $a_i$，它可能作为最大值的极长区间显然是 $(lft_i, rgt_i)$。这个区间又被 $a_i$ 分为左右两段。设两段中较短的一段长度为 $mn = \\min\\\\{i - lft[i], rgt[i] - i\\\\}$，较长一段长度为 $mx = \\max\\\\{i - lft[i], rgt[i] - i\\\\}$，总长度为 $len = rgt_i - lft_i + 1$。那么 $a_i$ 可以带来以下贡献：\n\n- $\\forall k \\in [1, mn], ans_k \\leftarrow ans_k + k \\cdot a_i$；\n\n- $\\forall k \\in (mn, mx], ans_k \\leftarrow ans_k + mn \\cdot a_i$；\n\n- $\\forall k \\in (mx, len], ans_k \\leftarrow ans_k + (len + 1 - k) \\cdot a_i$。\n\n将第三组式子拆为：\n\n- $\\forall k \\in (mx, len], ans_k \\leftarrow ans_k + (len + 1) \\cdot a_i, ans_k \\leftarrow ans_k - k \\cdot a_i$。\n\n于是维护两个差分数组即可。第一个差分数组 $c1_i$ 维护的实际值就是 $c1_i$，第二个差分数组 $c2_i$ 维护的实际值是 $i \\cdot c1_i$。\n\n于是就做完了。\n\n[提交记录](https://atcoder.jp/contests/abc407/submissions/66119295)。","tags":["题解"],"categories":["ESSAY"]},{"title":"[ARC147C] Min Diff Sum 题解","url":"/articles/ARC147C-Min-Diff-Sum-题解/","content":"\n本文提供一种另类做法。~~虽然我的代码从实现以及常数上都更劣一些。~~\n\n考虑原式的几何意义，即在数轴上的 $n$ 个区间内各选一个点使得这 $n$ 个点两两距离之和最小。\n\n考虑什么时候距离之和最小，显然是所有点都尽量向某一个位置靠拢时。所以钦定中心点，让其它所有点都尽量向这个点靠拢，再暴力计算贡献。时间复杂度 $O(n^2V)$。\n\n注意到，中心点取在非端点显然时不会更优，所以可以离散化。时间复杂度 $O(n^3)$ 。\n\n现在考虑优化计算原式的过程。考虑拆贡献。$n$ 个点把数轴分成 $n - 1$ 条线段（以及两条射线）,那么第 $i$ 条线段就会被计算 $i \\cdot (n - i)$ 次。这是显然的。那么我们可以现将这 $n$ 个点排序，再按上述过程计算。时间复杂度 $O(n^2 \\log n)$。\n\n容易发现，在中心点移动的过程中，有许多点的位置并不会随着中心点位置的改变而改变，所以考虑动态维护每个点的位置以及贡献。设当前中心点位置为 $pos$，可以把 $n$ 个点分成 $3$ 段：\n\n- $r_i \\lt pos$，这些点的位置固定在了 $r_i$，不会再改变。\n\n- $l_i \\le pos \\le r_i$，这些点的位置会随着中心点位置的改变而改变，且它们的位置都是 $pos$。\n\n- $pos \\lt l_i$，这些点的位置暂时固定在了 $l_i$。\n\n那么我们可以动态维护这三段的端点。当 $pos$ 遇到了一个左端点时，相当于将一个点从第三段移到第二段；当 $pos$ 遇到了一个右端点时，相当于把一个点从第二段移到了第一段。\n\n在此同时，动态维护每段内部的贡献。第一三段的贡献只需要在遇到端点时更新，第二段内部显然没有贡献。$总贡献 = 第一段的贡献 + 一二段交界处贡献 + 二三段交界处贡献 + 第三段的贡献$。\n\n于是这道题就做完了。\n\n[提交记录](https://atcoder.jp/contests/arc147/submissions/66184899)。","tags":["题解"],"categories":["ESSAY"]},{"title":"别样的罚时大战","url":"/articles/别样的罚时大战/","content":"\n本文是一篇 **CQ CCPC** 流水帐游记，想了解题目做法的请移步。\n\n### Day $-\\infty$\n\n和 qcz, jmr 分到一组了。赛后一结算，jmr 是 MVP，hyc 是躺赢狗。\n\n队名叫作 grass8cao。\n\n### Day $-\\infty + 1$\n\n时间安排出来了，结果是当天坐高铁往返，早上 6:20 就出发呜呜呜。\n\n### Day 0\n\n早上 5:50 就起床了。\n\n9 点左右高铁到达重庆西。\n\n10点过一点到考场开始比赛。策略是 jmr 和 qcz 轮着写代码，我负责翻译和想点子。\n\n1:18 AC 了 6 道题，~~一共吃了整整 4 发罚时~~。\n\n接下来的 50 分钟内，jmr 把 E 过了，甚至还是首 A。\n\n随后又用了半个小时写 D。\n\n之后 jmr 开始写 DS G 题。写了一个小时，~~吃了 5 发罚时后~~，终于在封榜之前过了，还是首 A。这几道题我们的策略是：“赢在过题数上，不赢在罚时上，~~罚时已经不重要了~~！”\n\n在封榜之前，基本都是 Zi_Gao 的队第一，我们以同样的 AC 数~~与优秀的罚时~~紧随其后。\n\n于是 qcz 又继续写前面没写完的 J。在 jmr 的 $+\\infty$ 组 hack 与~~**整整 9 发罚时**~~之后，也是终于调过了。\n\n此时已经 4:31。我在 jmr 休息的时候告诉他 I 可做，可是最开始我没讲清楚，他也没听。后来他突然会 I 了，相比 K 的 NTT，这道欧拉回路显然更好写。于是 jmr 果断选择 I，20 分钟后 AC。~~中间吃了一发罚时~~。\n\n此时 4:51，基本已经没有悬念了（吗？）。\n\n可这时我们发现了几个 BYD 藏题哥，于是开始担心。不过算一算，前五是没问题，因为算上 Zi_Gao 一个队在前面，还有大概三队藏题哥。\n\n比赛结束了，可还没解榜。后来问 Zi_Gao 他们队，结果他们封榜之后就没写了，最终定格在 9 题。\n\n后来吃了火锅上了大巴不知道过了多久，终于看到榜单了。结果那几队藏题哥的许多题都没过。于是就以 11 道题与~~优秀的 21 发罚时~~的成绩成为榜一。\n\n于是我就真的成为躺赢狗了。躺着拿（成绩等同）金牌与家长老师的各种表扬。","tags":["游记"],"categories":["ESSAY"]},{"title":"[ABC145F] Laminate 题解","url":"/articles/ABC145F-Laminate-题解/","content":"\n想必大家都会积木大赛。\n\n若修改 $h_i$，考虑如何让它带来的贡献最小。根据积木大赛的结论，只需让 $h_i' \\in [\\min\\{h_{i - 1}, h_{i + 1}\\}, \\max\\{h_{i - 1}, h_{i + 1}\\}]$，这个位置就不会带来任何的贡献，可以认为我们删除了第 $i$ 个位置。显然，$\\forall i \\in [1, n]$，总存在 $h_i'$ 满足以上条件。\n\n那么问题就变成了，原本有 $n$ 个位置，可以删除最多 $k$ 个位置，求最小答案。于是自然而然地想到了 DP。\n\n设 $dp_{i, j, k}$ 表示现在在第 $i$ 个位置，删除了 $j$ 个位置，上一个没有被删除的位置是 $k$ 的最小答案。转移方程：\n\n$$\ndp_{i, j, k} =\n\\left \\\\{\n\\begin{aligned}\n& dp_{i - 1, j - 1, k},\\ k \\in [0, i) \\newline\n& \\min_{p \\in [0, i)}\\{dp_{i - 1, j, p} + \\max\\{h_i - h_p, 0\\}\\},\\ k = i\n\\end{aligned}\n\\right.\n$$\n\n时间复杂度 $O(n^3)$。\n\n[提交记录](https://atcoder.jp/contests/abc145/submissions/65585483)。","tags":["题解"],"categories":["ESSAY"]},{"title":"[ARC197D] Ancestor Relation 题解","url":"/articles/ARC197D-Ancestor-Relation-题解/","content":"\n好题啊好题。记 $b_i$ 表示矩阵的第 $i$ 行的内容（用 bitset 维护）。\n\n考虑什么时候有 $a_{u, v} = 1$。因为与孩子有关系的节点一定与祖先有关系，但与祖先有关系的节点不一定与孩子有关系。所以有 $b_u | b_v = b_u$ 或 $b_u | b_v = b_v$，前者对应 $u$ 是 $v$ 的祖先，后者则对应 $v$ 是 $u$ 的祖先。容易证明这是一个充要条件，那么若 $a_{u, v} = 0$，则一定不存在 $b_u | b_v = b_u$ 与 $b_u | b_v = b_v$。\n\n接下来考虑一种特殊情况：$b_u = b_v$，此时 $u, v$ 在一条没有任何分岔的一条“链”上，那么这条链上的节点的位置就可以互换。设一组 $b_i$ 相同的点的数量为 $sz$，那么这一组点可以带来 $sz!$ 的贡献。\n\n此外，$\\forall i \\in [1, n]$，显然需要有 $a_{i, 1} = 1, a_{1, i} = 1$。那么我们就总结出以下三条条件或贡献：\n\n- $\\forall i \\in [1, n], a_{i, 1} = 1, a_{1, i} = 1$。\n- $b_u | b_v = b_u$ 或 $b_u | b_v = b_v$，当且仅当 $a_{u, v} = 1$。（等价于：$a_{u, v} = 1$，当且仅当 $b_u | b_v = b_u$ 或 $b_u | b_v = b_v$。）\n- 对于极多的 $sz$ 个 $b_i$ 相同的数，可以带来 $sz!$ 的贡献。\n\n于是按以上三点计算即可。时间复杂度 $O(\\frac{n^3}{w})$。\n\n[提交记录](https://atcoder.jp/contests/arc197/submissions/65525469)。","tags":["题解"],"categories":["ESSAY"]},{"title":"[ARC196A] Adjacent Delete 题解","url":"/articles/ARC196A-Adjacent-Delete-题解/","content":"\n假设 $n$ 是偶数。如果我们忽略删除相邻数的条件，即可以任选两个数相减，那么答案应该是前 $\\frac{n}{2}$ 大的数（记作“较大数”）的和减去前 $\\frac{n}{2}$ 小的数（记作“较小数”）的和。\n\n容易发现，当我们只能选相邻的数相减时，依然可以达到这个答案，因为在任意时刻，总存在至少一对较大数与较小数相邻。\n\n当 $n$ 是奇数，那么一定有一个元素不被选，且这个元素一定在奇数位，这样才能把数组分成长度为偶数的两段。枚举不被选的位置，用对顶堆维护前后两段的答案即可。\n\n时间复杂度 $O(n \\log n)$。\n\n[提交记录](https://atcoder.jp/contests/arc196/submissions/64670397)","tags":["题解"],"categories":["ESSAY"]},{"title":"[ABC400F] Happy Birthday! 3 题解","url":"/articles/ABC400F-Happy-Birthday-3-题解/","content":"\n考虑正难则反。问题转化为：\n\n> 一个环上有 $n$ 个物品，颜色分别为 $col_i$，每次操作选择两个数 $i, j$ 使得 $\\forall k \\in [i, j],  col_k = col_i \\lor col_k = 0$，将 $[i, j]$ 中的每个物品的颜色都设为 $0$。（下文将这种操作称为“漂白”。）一次操作的代价为 $j - i + 1 + x_{col_i}$。求将整个环漂白的最小总代价。\n  \n先断环为链。设 $dp_{i, j}$ 表示将 $[i, j]$ 漂白的最小代价，那么显然有 $dp_{i, j} = \\min_{k = i}^{j - 1} dp_{i, k} + dp_{k + 1, j}$。\n\n设 $f_{i, j}$ 表示使 $[i, j]$ 能够漂白的最小代价，那么显然有 $f_{i, j} = \\min_{k = 1}^{j - 1} f_{i, k} + dp_{k + 1, j}$。当 $col_i = col_j$ 时，有 $f_{i, j} = \\min (f_{i, j}, f_{i, j - 1}), dp_{i, j} = \\min (dp_{i, j}, f_{i, j} + j - i + x_{col_i})$。\n\n答案即为 $\\min_{i = 1}^n dp_{i, i + n - 1}$。","tags":["题解"],"categories":["ESSAY"]},{"title":"[CF2086E] Zebra-like Numbers 题解","url":"/articles/CF2086E-Zebra-like-Numbers-题解/","content":"\n确简单的啊，可是自己就是想不到。\n\n考虑计算一个数的斑马值。贪心地，尽量选大的斑马数减即可。\n\n考虑 DP，设 $dp_{i, j}$ 表示 $[1, i]$ 中斑马值为 $j$ 的数的个数。那么显然有 $dp_{i, j} = dp_{i - mx, j - 1} + dp_{mx - 1, j}$，其中 $mx$ 是不大于 $i$ 的最大的斑马数。具体地，$dp_{i - mx, j - 1}$ 表示 $[mx, i]$ 中斑马值为 $j$ 的数的个数，$dp_{mx - 1, j}$ 表示 $1, mx - 1$ 中斑马值为 $j$ 的数的个数。\n\n记搜即可。","tags":["题解"],"categories":["ESSAY"]},{"title":"联合省选 2025 游记","url":"/articles/联合省选-2025-游记/","content":"\n**感谢 [@fan_xiaoyi](https://www.luogu.com/user/1495223) 提供的部分文本故事。**\n\n**作者是初二蒟蒻，实力有限，不喜勿喷。**\n\n---\n\n在遥远的**傻子谷**，生长着一棵特殊的树，名为**二叉树**。它以结构规则、枝繁叶茂而闻名，被谷民们视为神树，而神树也庇佑着这片土地。  \n\n二叉树所结的果实被称为**提姆**，其颜色从红到黑，颜色越深，价值越高。此外，还存在一种**灰色提姆**，这类果实尚未成熟，在生长过程中会**随机变化**，无法预测其最终状态。每颗提姆都包含 **100** 颗种子，被称为**芬书**，而谷民们的目标便是收集尽可能多的芬书。  \n\n然而，在**2025**年，由**莲荷绳玄**施加的魔法影响了二叉树，使其结出了**六颗灰色提姆**。这六颗提姆竟化作六只强大的怪物，若想获得这些提姆中的芬书，便必须先战胜这些怪物。  \n\n经过谷民们的推选，我被派往迎战这些怪物，试图夺取属于傻子谷的芬书。据智者**犊子嘚**所言，若能收集到足够的芬书，神树将在**恩欧艾**的力量影响下，再次结出**六颗灰色提姆**，并衍生出新的怪物。然而，我深知自己的能力有限，未必能达成这一目标，因此只希望尽力而为。  \n\n---\n\n第一只怪物名为**幸运数字**，从外观来看，它属于**计数型**怪物，体型庞大，似乎难以应对。我仔细思考后，首先运用**离散化**的方法进行预处理，这一步是必不可少的。随后，我发现该怪物的核心机制是**区间加、单点查询**，于是决定采用**差分**进行优化。最后，在 $O(n \\log n)$ 的时间复杂度内，我成功击败了它，并获得 **100** 颗芬书。  \n\n尽管最终取得了胜利，但由于思考时间过长，我竟花费了**两个半小时**才找到合适的策略，这无疑是一个警示——若不能提高效率，接下来的挑战将更加艰难。  \n\n第二只怪物是**追忆**，它的特性与前者完全不同，更像是一位擅长语言与文学的**文科高手**。这只怪物防御极其严密，正面突破几乎不可能。我尝试以 $O(nq)$ 的方式逐步削弱其防御，并借此消灭了部分附属怪物，最终勉强获得 **20** 颗芬书，但也只能匆匆离开，未能彻底战胜对手。  \n\n第三只怪物名为**图排列**，从它出现的瞬间，我便感受到了一股强大的**压迫感**，甚至无法展开有效的对抗。在尚未理清思路之前，我便被迫撤退，最终一无所获。  \n\n至此，第一天的战斗结束，我一共收集到了 **120** 颗芬书。 \n\n---\n\n第二天的第一只怪物是**推箱子**。面对它时，我迅速想到了解决方案——**线段树维护区间覆盖**。这一策略在理论上可行，然而，我的实现方式时间复杂度为 $O(n \\log^2 n)$，或许并不足以完全击败怪物。尽管如此，我仍尽力施展此计，希望能尽可能多地收集芬书。  \n\n第二只怪物是**岁月**，又是一只**计数**类怪物。它似乎拥有深厚的力量，让人难以撼动。我尝试采用**暴力**方式试图窃取芬书，但也许是**法力不足**，无论如何努力，都未能战胜它。最终，我只能带着遗憾撤退，未能获得任何芬书。  \n\n最后一只怪物是**封印**，依旧是一只**计数**类怪物。由于时间紧迫，我无法深思熟虑，只能匆忙迎战。在激烈的战斗中，我设法获得了**8** 颗芬书，随后便匆匆离开。\n\n最终，我在第二天获得了**大约 100** 颗芬书。  \n\n---\n\n所有的战斗已经结束，我也该带着这**大约 220** 颗芬书回到傻子谷了。而在返回的路途中，我还幸运地捡到了来自**岁月**的 **4** 颗芬书，最终我总共获得了 **232** 个芬书。\n\n**接下来，便又是新一年的征途！**","tags":["游记"],"categories":["ESSAY"]},{"title":"P6808 Candies 题解","url":"/articles/P6808-Candies-题解/","content":"\n### 鲜花\n\n校内模拟赛T3，赛时想到了正解的 $60\\\\%$，所以就得了 $60$ 分……\n\n赛后 T 了若干发之后终于过了。\n\n---\n\n本文提供一种非回退背包的解法。\n\n在下文中，记 $k = \\sum_{i = 1}^n a_i$。\n\n### Solution 1\n\n假设我们修改 $a_i$，设用其他数拼出的方案数为 $cnt_ i$ ，那么当 $a_ i'$ 足够大时，有 ${cnt_ i'}_ {max} = 2cnt_ i + 1$。所以问题就转化到了求 $\\max_ {i = 1}^{n} cnt  _i$ 与 $i$。\n\n考虑枚举 $i$，并对于每个 $i$ 进行 DP 计算 $cnt_i$。求出最大值与最大值位置（即 $p$）后，需要求 $q$。\n\n设 $f_i$ 表示是否能凑出 $i$。很容易发现，当 $\\sum_{i = 1}^k [f_i = 1, f_{i + q} = 1] = 0$ 时，$q$ 合法。暴力枚举即可。\n\n时间复杂度 $O(n ^ 2k + k ^ 2)$，完全不能接受。\n\n### Solution 2\n\n我们发现，在第一种解法中，对于同一个物品，进行了太多次的背包 DP。我们尝试只进行一次DP，**并标记为了凑出当前这个数，有哪些位置必须被选取**。若不需要选取第 $i$ 个数，代表当我们修改 $a_i$ 时仍然能凑出这个数。\n\n具体地，设 $dp_{i, j}$ 表示为了凑出 $i$，是否需要 $a_j$。转移方程如下。\n\n$$$\nf_i = \\mathop{bitor}\\limits_{1\\le k\\le n} f_{i - a_k}\\\\\n\\ \\\\\ndp_{i, j}=\n\\mathop{bitand}\\limits_{1\\le k\\le n,\\ f_{i - a_k} = 1}\n\\begin{cases}\ndp_{i - a_k, j}\\ (j \\ne k)\\\\\n1\\ (j = k)\n\\end{cases}\n$$$\n\nDP 完之后统计 $cnt_i$，剩余步骤与解法一相同。\n\n时间复杂度仍然是 $O(n ^ 2k + k ^ 2)$，但常数好得多，在洛谷上取得了 $60$ 分的好成绩！（这也是我赛时的做法，个人认为特别符合直觉。）\n\n### Solution 3\n\n考虑优化一下求 $q$ 的过程。前文已推得，当 $\\sum_{i = 1}^k [f_i, f_{i + q}] \\ne 0$，$q$ 不合法。设全集（可重集）为 $U$，此时有可重集 $S, T$ 满足 $S, T \\subset U, (\\sum_{i \\in S} b_i) - (\\sum_{i \\in T} b_i) = q$。再正反做一次背包即可。总时间复杂度 $O(n^2k)$，还是卡。\n\n### Solution 4\n\n由于所有状态都是 $0$ 或 $1$，所以可以用 ``bitset`` 优化。最终复杂度 $O(\\frac{n ^ 2k}{w})$，趋近于 $O(nk)$，可以通过。\n\n### Code\n\n在代码中，``dp[i][0]`` 代表文中的 $f_i$，其余的 ``dp[i][j]`` 代表文中的 $dp_{i, j}$。\n\n```cpp\nint n, a[105], sum, cnt[105], mx, p;\nbitset<105> dp[700005];\nbitset<1400005> tmp;\n\nint main() {\n\tread(n);\n\tfor(int i = 1; i <= n; ++i)\n\t\tread(a[i]), sum += a[i];\n\t// 初始化 dp 数组\n\tsort(a + 1, a + 1 + n);\n\tdp[0] = 1, dp[1][0] = 0;\n\tfor(int i = 1; i <= n; ++i)\n\t\tdp[1][i] = 1;\n\tfor(int i = 2; i <= sum; ++i)\n\t\tdp[i] = dp[i - 1];\n\t// 计算 dp 数组\n\tfor(int i = 1; i <= n; ++i)\n\t\tfor(int j = sum; j >= a[i]; --j)\n\t\t\tif(dp[j - a[i]][0]) {\n\t\t\t\tdp[j] &= dp[j - a[i]];\n\t\t\t\tif(!dp[j][0]) dp[j][i] = 1;\n\t\t\t\tdp[j][0] = 1;\n\t\t\t}\n\t// 统计 cnt 并计算 p\n\tfor(int i = 1; i <= sum; ++i)\n\t\tif(dp[i][0])\n\t\t\tfor(int j = 1; j <= n; ++j)\n\t\t\t\tif(!dp[i][j])\n\t\t\t\t\t++cnt[j];\n\tmx = p = 0;\n\tfor(int i = 1; i <= n; ++i)\n\t\tif(cnt[i] > mx) mx = cnt[i], p = i;\n\t// 计算 q\n\ttmp[7000 * n] = 1;\n\tfor(int i = 1; i <= n; ++i)\n\t\tif(i != p)\n\t\t\ttmp = tmp | (tmp << a[i]) | (tmp >> a[i]);\n\tfor(int i = 1; i <= sum - a[p] + 1; ++i)\n\t\tif(!tmp[7000 * n + i])\n\t\t\treturn printf(\"%d %d\\n\", a[p], i), 0;\n}\n```\n\n这代码截止发题解当天竟然还跑出了[洛谷最优解](https://www.luogu.com.cn/record/200199228)。（不过做这道题的人少。）","tags":["题解"],"categories":["ESSAY"]},{"title":"NOIP + 游记（流水帐）","url":"/articles/NOIP-游记/","content":"\n### 为什么是NOIP + 游记？\n\n因为其实是 ``NOIP游记`` 和 ``环球中心游记`` 。\n\n### Warning\n\n本文纯流水帐，想了解题目做法的请移步。\n\n### Day -34\n\n考 ``CSP-S`` 了，炸掉了。赛时估分只有120-160pts。\n\n### Day -26\n\n出分了，170pts。\n\n### Day -11\n\n出分数线了，SC180pts呜呜呜。\n\n### Day -??\n\n老师给我们报了NOIP。\n\n### Day -??\n\nNOIP线出来了，165pts，好险。\n\n### Day 0\n\n#### 7：50\n\n到嘉祥锦江了。\n\n#### 8：00\n\n在机房门口和同学们玩了一会儿，还上了个厕所（嘉祥的卫生间竟然有坐便。但是，很难评。。。）。\n\n#### 8：20\n\n发现我的键盘空格键回弹不好，找老师换了一个。\n\n#### 8：30\n\n开考了。大概看了一下题，第一眼T2、T3计数，感觉不可做；T1贪心，感觉可做；T4数据结构应该能骗点分。开写T1。\n\n#### 10：45\n\n由于本蒟贪心不好，再加上本来太菜了，T1花了约2.25h（其实中间也有摸鱼）才过大样例。做法：找两个字符串在“连通块”内0和1的个数，再尽量去匹配。又把剩下的题看了一遍，感觉T2是数学题，可做。开写T2。\n\n#### ??：??\n\n写了一下 $m = 1$ 和特殊性质A，预估35pts。这两个性质是很容易推出式子来的。\n\n#### 12：30\n\n边摸鱼边写迷惑行为边推式子，T2最后蒙猜凑测量斗过大样例了。做法：数学，推式子，这里不（想）详细展开。没时间写其它题了。开颓。\n\n#### 13：00\n\n考完了。赛时预估200pts。\n\n#### Summary\n\n本初中蒟蒻第一次打NOIP，还是太蒟了，主要在摸鱼或罚坐（还有写迷惑行为），不过感觉发挥比CSP-S要好。\n\n#### 13：10\n\n出考场，和家长、同学沟通，准备找个地方一起玩。最后选择去了[JDScript0117](https://www.luogu.com.cn/user/910593)家附近的环球中心。另外还有[hard_plan](https://www.luogu.com.cn/user/749406)和[HD0X](https://www.luogu.com.cn/user/545470)。\n\n路上浅浅讨论了一下。[hard_plan](https://www.luogu.com.cn/user/749406)说了一个关于T4LCA的trick，但是就算我赛时知道这个trick我也做不来（因为我现在还是做不来）。\n\n#### 13：??\n\n到环球中心了。吃的~和~麦~府~当~捞~劳~面~。它的薯~面~条都是用土豆做的！\n\n#### 14：??-15：??\n\n吃完了。不知道玩什么。先去喜茶坐着了。考虑剧本杀或桌游之类，最后说去买扑克牌，结果我妈让我16：00就要走，没买扑克牌。无语了。\n\n#### 15：40\n\n喜茶太多人了，到星巴克一人点了一杯拿铁。\n\n#### 16：00\n\n我走了，其他人说是去旁边公园骑车了。\n\n#### 17：00\n\n[JDScript0117](https://www.luogu.com.cn/user/910593)给我打电话让我立即马上随便发两条朋友圈，原来他们没有骑车，在公园里晒太阳、玩真心话大冒险。我本来以为他们这些大朋友不像我这个小朋友一样喜欢玩真心话大冒险，所以最开始就没提出来，最后一下午啥也没干。烦。\n\n#### 17：10\n\n重新写了T2的代码，洛谷上民间~故事~数据A了（民间故事->folklore）。\n\n#### 18：00\n\n[yishu2(教练)](https://www.luogu.com.cn/user/17126)说第一题是DP，有坑，贪心可能会挂一些。看运气吧。\n\n### Day 1\n\n洛谷上四道题的民间数据已经陆续在出了，中午测了T1，过了。最终自测200pts，希望不要写挂。看了一下去年的题和分数线，洛谷上给的难度是今年严格不小于去年，去年SC一等线200pts，今年就看运气了。\n\n### Day 2 - 6\n\n_Day 6 : 12月6日_\n\n这几天中间不定时地交民间数据（因为害怕数据更改被卡掉，不过事实上并没有），Waiting。\n\n### Day 7\n\n今天早上准备去高中的时候恰好碰到``LCY``，他说出分了。啊？不是12月9日才出分吗？（而且12月9日是我的生日。）结果提前了？这就是住校生的缺点——信息闭塞。于是赶紧跑到机房，查分——爽！没挂！200pts。\n\n虽然说啊，我还是够蒟的，但是该拿的分还是拿到了，还是比较开心。\n\n达成成就： $\\mathrm{S} \\lt \\mathrm{NOIP}$ 。","tags":["游记"],"categories":["ESSAY"]},{"title":"[ARC050C] LCM 111 题解","url":"/articles/ARC050C-LCM-111-题解/","content":"\n## 一句话题解\n\n转化两个大数的 $\\gcd$，再用倍增求答案。\n\n## 题意\n\n[题目](https://www.luogu.com.cn/problem/AT_arc050_c)  \n\n给你 $a, b, m$，其中 $1 \\leq a, b \\leq 10^{18}, 2 \\leq m \\leq 10^9$，让你求 $a$ 个 $1$ 拼接起来的数和 $b$ 个 $1$ 拼接起来的数的最小公倍数。\n\n## 思路\n\n我们构造一个函数 $\\mathrm{one}(x)$ 表示 $x$ 个 $1$ 拼接起来，用数学语言表述就是：  \n\n$$\n\\mathrm{one}(x) = \\frac{10^x - 1}{9}\n$$  \n\n同时又有 $\\mathrm{lcm}(a, b) = a \\cdot b \\div \\gcd(a, b)$，那么我们要求的就转化成了：  \n\n$$\n\\mathrm{one}(a) \\cdot \\mathrm{one}(b) \\div \\gcd(\\mathrm{one}(a), \\mathrm{one}(b))\n$$  \n\n因为 $\\mathrm{one}(a)$ 与 $\\mathrm{one}(b)$ 都比较好求，所以此时的问题就转移到了怎么求 $\\gcd(\\mathrm{one}(a), \\mathrm{one}(b))$ 上来。\n\n我们尝试感性理解一下。可以发现：  \n\n$$\n\\gcd(\\mathrm{one}(a), \\mathrm{one}(b)) = \\mathrm{one}(\\gcd(a, b))\n$$  \n\n此时答案就变成了：  \n\n$$\n\\mathrm{one}(a) \\cdot \\mathrm{one}(b) \\div \\mathrm{one}(\\gcd(a, b))\n$$  \n\n我们把这个式子分成两组：  \n\n$$\n\\mathrm{one}(a)\n\\\\\n\\mathrm{one}(b) \\div \\mathrm{one}(\\gcd(a, b))\n$$  \n\n对于每一组单独用倍增计算即可。详见代码。  \n\n[提交记录 | 快得飞起](https://atcoder.jp/contests/arc050/submissions/57132805)  \n\n## AC Code\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nint a, b, p, d;\n\nint gcd(int a, int b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n}\n\nint qpow(int x, int y) { // 快速幂\n    int ans = 1;\n    while (y) {\n        if (y & 1) ans = (ans * x) % p;\n        y >>= 1;\n        x = (x * x) % p;\n    }\n    return ans;\n}\n\nint cal(int x, int y) { // 倍增计算答案\n    int now = 1, npow = qpow(10, y), ans = 0;\n    while (x) {\n        if (x & 1) ans = ((ans * npow) % p + now) % p;\n        x >>= 1;\n        now = ((now * npow) % p + now) % p;\n        npow = (npow * npow) % p;\n    }\n    return ans;\n}\n\nvoid solve() {\n    cin >> a >> b >> p;\n    d = gcd(a, b);\n    cout << cal(a, 1) * cal(b / d, d) % p << endl; // 对于第二组，gcd(a, b) 是一个循环节，一共有 b / gcd(a, b) 个循环。\n    return;\n}\n\nsigned main() {\n    cin.tie(0);\n    cout.tie(0);\n    int T = 1;\n    while (T--) solve();\n    return 0;\n}\n```\n\n## 最后\n\n问我为什么不推式子？如果你直接开始推式子，你会推出一个带分母的式子。有分母就要求逆元，但是本题中并未保证模数的性质，所以不能直接求逆元。","tags":["题解"],"categories":["ESSAY"]},{"title":"[COCI 2023/2024 #2] Zatopljenje 题解","url":"/articles/COCI-2023-2024-2-Zatopljenje-题解/","content":"\n### 闲话\n\n考前集训，每日一练做到的题，~我写挂了五次~。自己想到**分块**的做法，看题解区没有，于是来发一篇。\n\n### 思路\n\n我们注意到，当海水高度为 $x$ 时，区间 $[l, r]$ 的小岛的个数可以这么计算：\n\n$$\n[h_l \\gt x] + \\sum_{i = l}^{r - 1}[h_i \\le x \\lt h_{i + 1}]\n$$\n\n所以第 $i$ 个位置产生贡献**当且仅当** $h_i \\le x \\lt h_{i + 1}$ ，考虑分块并预处理出每个块的答案。由于 $0 \\le h_i, x_i \\le 10^9$ ，所以要**离散化**。时间复杂度 $O((n + q)(\\sqrt{n} + \\log{n}))$ ，虽然比不上线段树或树状数组，但是思路还是比较好想的。\n\n具体细节见代码实现。\n\n**Tip : 不要开``long long``，不然会MLE。**\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\n#define PII pair<int, int>\nusing namespace std;\ntemplate <typename _Tp>\ninline void read(_Tp &x) {\n\tint neg = 1;\n\tchar ch;\n\twhile(ch = getchar(), !isdigit(ch)) if(ch == '-') neg = -1;\n\tx = ch - '0';\n\twhile(ch = getchar(), isdigit(ch)) x = (x << 3) + (x << 1) + (ch ^ '0');\n\tx *= neg;\n\treturn;\n}\n// bans[i][j] : 第 i 个块当 x = j 时的答案\nint n, q, a[200005], blk, cnt, bans[505][200005], x, l, r;\nPII p[200005];\nsigned main() {\n\tread(n), read(q);\n\tfor(int i = 1; i <= n; ++i) read(a[i]);\n\t// 加一个 0 ，方便离散化\n\ta[0] = 0, ++n;\n\t// 离散化\n\tfor(int i = 0; i < n; ++i) p[i] = {a[i], i};\n\tsort(p, p + n);\n\tfor(int i = 0; i < n; ++i) {\n\t\tif(i == 0) a[p[i].second] = 1;\n\t\telse {\n\t\t\tif(p[i].first == p[i - 1].first) a[p[i].second] = a[p[i - 1].second];\n\t\t\telse a[p[i].second] = a[p[i - 1].second] + 1;\n\t\t}\n\t}\n\t// 分块\n\tblk = sqrt(n);\n\tcnt = (n - 1) / blk + 1;\n\tfor(int i = 0; i < n - 1; ++i) if(a[i] < a[i + 1]) {\n\t\t\t// 差分计算答案\n\t\t\t++bans[i / blk][a[i]];\n\t\t\t--bans[i / blk][a[i + 1]];\n\t\t}\n\t// 前缀和\n\tfor(int i = 0; i < cnt; ++i) for(int j = 1; j <= n; ++j) bans[i][j] += bans[i][j - 1];\n\twhile(q--) {\n\t\tread(l), read(r), read(x);\n\t\t// 对 x 离散化，找到最后一个小于等于 x 的值\n\t\tint ind = lower_bound(p, p + n, (PII){x + 1, 0}) - p, ans;\n\t\tx = a[p[ind - 1].second];\n\t\t// l 点的答案\n\t\tans = a[l] > x;\n\t\tif(l / blk == r / blk) {\n\t\t\t// 在同一个块中\n\t\t\tfor(int i = l; i < r; ++i) ans += (a[i] <= x && a[i + 1] > x);\n\t\t}\n\t\telse {\n\t\t\t// 计算 l 所在块的答案\n\t\t\tfor(int i = l; i < (l / blk + 1) * blk; ++i) ans += (a[i] <= x && a[i + 1] > x);\n\t\t\t// 计算 r 所在块的答案\n\t\t\tfor(int i = r / blk * blk; i < r; ++i) ans += (a[i] <= x && a[i + 1] > x);\n\t\t\t// 计算中间块的答案\n\t\t\tfor(int i = l / blk + 1; i < r / blk; ++i)ans += bans[i][x];\n\t\t}\n\t\tprintf(\"%lld\\n\", ans);\n\t}\n\treturn 0;\n}\n```\n\n[Submisson](https://www.luogu.com.cn/record/183250736)\n\n---\n\n**完结撒花！！！✿✿ヽ(°▽°)ノ✿**","tags":["题解"],"categories":["ESSAY"]},{"title":"关于","url":"/about/index.html","content":"\nCW 初三蒟蒻，现役。\n\n![](https://api.jerryz.com.cn/about?id=725640)\n\n![](https://atrating.baoshuo.dev/rating?username=Getaway_Car)\n\n![](https://cfrating.baoshuo.dev/rating?username=Getaway_Car)"},{"title":"友情链接","url":"/friends/index.html","content":"\n[IGpig's Blog](https://kalipig.github.io/)\n\n[lijingshu's blog](https://lijingshu2014.github.io/)"},{"url":"/categories/index.html"},{"url":"/search/index.html"},{"url":"/tags/index.html"}]